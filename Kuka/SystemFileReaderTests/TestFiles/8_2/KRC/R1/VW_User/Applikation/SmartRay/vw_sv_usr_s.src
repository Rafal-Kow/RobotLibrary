&ACCESS  RV
&PARAM DISKPATH = VW_User/Applikation/SmartRay
&PARAM TPVW_VERSION = 8.3.0
&REL 200
DEF vw_sv_usr_s( )
; 
;*-----------------------------------------------------*
;*Technologiepaket SmartRay                            *
;*                                                     *
;*Konzernstandard                                      *
;*Bearbeiter: W. Lehmeier I/PG-C61                     *
;*                                                     *
;* Erstellt am:                                        *
;* 2015.06.17 LE                                       *
;*                                                     *
;*------------------------------------------------------
; 
END
;
;FOLD INIT SmartRay 
GLOBAL DEF SV_INIT( )
INT i
;
;FOLD Version Techpaket
Tech_SmartRay.Name[]="KS24.01.001_150617"
;ENDFOLD
;
;FOLD Vorbesetzung Meldungsausgabe
FOR i = 1 TO 100
  n_SVS_Handle[i]=-1
  n_SVR_Handle[i]=-1
ENDFOR
;ENDFOLD
;
END
;ENDFOLD
;
;-----------------------------------------------------------
;FOLD SAW SmartRay 
GLOBAL DEF SV_SAW( )
INT i
;
;
END
;ENDFOLD
;
;-----------------------------------------------------------
;FOLD RESET SmartRay 
GLOBAL DEF SV_RESET( )
INT i
;
;
END
;ENDFOLD
;
;-----------------------------------------------------------
;FOLD CANCEL SmartRay 
GLOBAL DEF SV_CANCEL( )
INT i
;
;
END
;ENDFOLD
;
;-----------------------------------------------------------
;FOLD LOOP SmartRay V1 
GLOBAL DEF SV1_LOOP( )
;
;Ausgabe Statusmeldungen an BMS 
;
;Prozess aktiv
$OUT[O_SV1_P_Akt]=$IN[I_SV1_Ein]
;Energiesparmodus
$OUT[O_SV1_E_Mode]=$IN[I_R_E_Mode]
;Sensortest Laeuft
$OUT[O_SV1_Af_Asf]=$OUT[O_SV1_ST_Akt]
;Fehler Kalibrierung
$OUT[O_SV1_Feh_ST]=$OUT[O_R_Auto] AND $IN[I_SV1_ST_NiO] 
;Sammelstoerung
$OUT[O_SV1_Sammel]=(NOT $IN[I_SV1_StoMes] OR NOT $IN[I_SV1_Sto24V] OR NOT $IN[I_SV1_StoKli] OR $IN[I_SV1_ST_NiO] OR SV1_LBitFeh) AND $OUT[O_R_Auto] 
;	
;Lebensbit_Ueberwachung
L_Bit_SV(1)
;
END
;ENDFOLD
;
;-----------------------------------------------------------
;FOLD LOOP SmartRay V2 
GLOBAL DEF SV2_LOOP( )
;
;Ausgabe Statusmeldungen an BMS  
;
;Prozess aktiv
$OUT[O_SV2_P_Akt]=$IN[I_SV2_Ein]
;Ohne Prozess
$OUT[O_SV2_o_Pro]=$IN[I_SV2_o_Pro]
;Energiesparmodus
$OUT[O_SV2_E_Mode]=$IN[I_R_E_Mode]
;Sensortest Laeuft
$OUT[O_SV2_Af_Asf]=$OUT[O_SV2_ST_Akt]
;Fehler Kalibrierung
$OUT[O_SV2_Feh_ST]=$OUT[O_R_Auto] AND $IN[I_SV2_ST_NiO] 
;Sammelstoerung
$OUT[O_SV2_Sammel]=(NOT $IN[I_SV2_Sammel] OR NOT $IN[I_SV2_Sto24V]  OR NOT $IN[I_SV2_StoKli] OR $IN[I_SV2_ST_NiO] OR SV2_LBitFeh) AND $OUT[O_R_Auto] 
;	
;Lebensbit_Ueberwachung
L_Bit_SV(2)
;
END
;ENDFOLD
;
;-----------------------------------------------------------
;FOLD Lebensbit SV
DEF L_Bit_SV(SVNr :IN)
;Setzen / Rueksetzen Lebensbit Roboter
INT SVNr
BOOL LBitSV, LBitFault
INT RobTimer
BOOL ErrLBit, bRet
ErrLBit = FALSE
LBitFault=FALSE
;Setzen - Rucksetzen  des Lebensbit an Zangensteuerung
$OUT[LBitToSV[SVNr]] = NOT $IN[LBitFromSV[SVNr]]
RobTimer = $ROB_TIMER	
IF $IN[LBitFromSV[SVNr]] <> LBitState[SVNr] THEN
  LBitTimeCnt[SVNr] = RobTimer
ENDIF
IF (RobTimer - LBitTimeCnt[SVNr]) > 5000 THEN
  ErrLBit = TRUE
  ErrSVNr = SVNr
  SV_LBitFeh[SVNr]=TRUE
ENDIF
LBitState[SVNr] = $IN[LBitFromSV[SVNr]]
IF ErrLBit THEN
  SmartRay_Msg(1,#StateMsg, ErrSVNr)
ELSE
  IF n_SVS_Handle[1]>-1 THEN
    bRet=Clear_KrlMsg(n_SVS_Handle[1])
    n_SVS_Handle[1]=-1
    ErrSVNr = -1
  ENDIF
  SV_LBitFeh[SVNr]=FALSE
ENDIF
END
;ENDFOLD
;
;-----------------------------------------------------------
;FOLD SV_Meldungen
DEF SmartRay_Msg(msg_nr :IN, MsgTyp :IN, SVNr :IN)
INT msg_nr, SVNr, Answer
DECL SVS_MsgType MsgTyp
DECL KrlMsg_T USER_MSG
DECL KrlMsgPar_T Par[3]
DECL KrlMsgOpt_T Opt
;
USER_MSG = { Modul[] "SV_S_Msg", Nr -1, Msg_txt[] " "}
Opt = { VL_Stop FALSE, Clear_P_Reset TRUE, Log_To_DB TRUE }
Par[1] = { Par_type #Value, Par_txt[] " " }
;
IF Varstate("SVNr")==#initialized then
  SWITCH SVNr
    CASE 1
      Par[1] = { Par_type #Value, Par_int 1 }
    CASE 2
      Par[1] = { Par_type #Value, Par_int 2 }
    CASE 3
      Par[1] = { Par_type #Value, Par_int 3 }
    CASE 4
      Par[1] = { Par_type #Value, Par_int 4 }
    CASE 5
      Par[1] = { Par_type #Value, Par_int 5 }
    CASE 6
      Par[1] = { Par_type #Value, Par_int 6 }
    DEFAULT
      Par[1] = { Par_type #Value, Par_txt[] " " }
  ENDSWITCH
ELSE
  Par[1] = { Par_type #Value, Par_txt[] " " }
ENDIF
;
IF ((n_SVS_Handle[msg_nr]<0) OR (MsgTyp==#NotifyMsg) OR (MsgTyp==#QuitMsg)) THEN
  USER_MSG.Nr = msg_nr
  SWITCH msg_nr
    CASE 1
	   USER_MSG.MSG_TXT[]="keine Antwort auf Lebensbit"
    CASE 2
	   USER_MSG.MSG_TXT[]=" "
    CASE 3
	   USER_MSG.MSG_TXT[]=" "
    CASE 4
	   USER_MSG.MSG_TXT[]=" "
    DEFAULT
	   USER_MSG.MSG_TXT[]="unbekannte Meldung"
  ENDSWITCH
  SWITCH MsgTyp
    CASE #StateMsg
      n_SVS_Handle[msg_nr] = Set_KrlMsg (#State, USER_MSG, Par[], Opt) ;Ausgabe Statusmeldung
    CASE #QuitMsg
      n_SVS_Handle[msg_nr] = Set_KrlMsg (#Quit, USER_MSG, Par[], Opt) ;Ausgabe Quittierungsmeldung
    CASE #NotifyMsg
      n_SVS_Handle[msg_nr] = Set_KrlMsg (#Notify, USER_MSG, Par[], Opt) ;Ausgabe Hinweismeldung
    DEFAULT
      n_SVS_Handle[msg_nr] = Set_KrlMsg (#Quit, USER_MSG, Par[], Opt) ;Ausgabe Quittierungsmeldung
  ENDSWITCH
ENDIF
END
;
;ENDFOLD (SV Meldungen)
