&ACCESS  RV
&PARAM DISKPATH = VW_User/Applikation/Mutterbuckeln
&PARAM TPVW_VERSION = 8.3.0
&REL 200
DEF vw_mb_usr_r( )
; 
;*-----------------------------------------------------*
;*Technologiepaket Mutterbuckeln                       *
;*                                                     *
;*Konzernstandard                                      *
;*Bearbeiter: W. Lehmeier I/PG-C61                     *
;*                                                     *
;* Erstellt am:                                        *
;* 2015.06.16 LE                                       *
;*                                                     *
;*------------------------------------------------------
; 
END
;
;FOLD MBuckeln_Interface
GLOBAL DEF MB_Interfac(USER_CMD:IN,CMD_SEL:IN,PAR1:IN,PAR2:IN,PAR3:IN,PAR4:IN,PAR5:IN,PAR6:IN)
DECL VW_USER_CMD USER_CMD
INT  CMD_SEL,PAR1,PAR2,PAR3,PAR4,PAR5,PAR6
INT i
;
;-----------------------------------------------------------
SWITCH USER_CMD
;
;-----------------------------------------------------------
  CASE #USR_INIT
    ;FOLD Init
    ;
    ;
    ;ENDFOLD (Init)
;
;-----------------------------------------------------------
  CASE #USR_ADV
    ;FOLD Advance
;    
    SWITCH PAR1
      CASE 1
        CONTINUE
        MBCorrValue=GetMutterValue(Mu1_FirstBit)
      CASE 2  
        CONTINUE
        MBCorrValue=GetMutterValue(Mu2_FirstBit) 
    ENDSWITCH    
    WHILE ((MBCorrValue<0) or (MBCorrValue>10))
      MBuckeln_Msg(1,#QuitMsg) ; Korrekturwert nicht im zulaessigen Bereich
    ENDWHILE
;
    MyCorr=$NULLFRAME
    CONTINUE
    MyCorr.X=-(MBCorrValue)
    TRIGGER  WHEN DISTANCE=1 DELAY=-100.0 DO T_B_Corr(MyCorr) PRIO =-1
;    
    SWITCH PAR1
      CASE 1
        CONTINUE
        Prog_Nr_MB1=PAR2
        CONTINUE
        MB_PktNr_SPS=PAR5
      CASE 2
        CONTINUE
        Prog_Nr_MB2=PAR2
        CONTINUE
        MB_PktNr_SPS=PAR5  
    ENDSWITCH  
;
    ;ENDFOLD (Advance)
;
;-----------------------------------------------------------
  CASE #USR_TRIG
    ;FOLD Trig
;    
    MB_PktNr_SPS=PAR5
    IF (PAR5==$COUNT_I[I_Arbpkt_Nr]) AND NOT (PAR5==0) THEN
      MBuckeln_Msg(2,#QuitMsg) ; Punkt schon gemuttert
    ENDIF
;
    ;ENDFOLD (Trig)
;
;-----------------------------------------------------------
  CASE #USR_MAIN
    ;FOLD Main
;    
    $COUNT_I[I_Arbpkt_Nr]=PAR5
;
    ;ENDFOLD (Main)
;
;-----------------------------------------------------------
  DEFAULT
;  
  ENDSWITCH
END
;
;ENDFOLD (Bolzen Interface)
;
;-----------------------------------------------------------
;FOLD MB_Meldungen
DEF MBuckeln_Msg(msg_nr :IN, MsgTyp :IN)
INT msg_nr
DECL MBR_MsgType MsgTyp
DECL KrlMsg_T USER_MSG
DECL KrlMsgPar_T Par[3]
DECL KrlMsgOpt_T Opt
DECL STATE_T Stat 
;
USER_MSG = { Modul[] "MB_R_Msg", Nr -1, Msg_txt[] " "}
Opt = { VL_Stop True, Clear_P_Reset True, Log_To_DB False }
Par[1] = { Par_type #Value, Par_txt[] " " }
;
IF ((n_MBR_Handle[msg_nr]<0) OR (MsgTyp==#NotifyMsg) OR (MsgTyp==#QuitMsg)) THEN
  USER_MSG.Nr = msg_nr
  SWITCH msg_nr
    CASE 1
      USER_MSG.MSG_TXT[]="Korrekturwert nicht im zulaessigen Bereich"
    CASE 2
	   USER_MSG.MSG_TXT[]="Punkt schon gemuttert"
    CASE 3
      USER_MSG.MSG_TXT[]=" "
    CASE 4
	   USER_MSG.MSG_TXT[]=" "
    CASE 19
	   USER_MSG.MSG_TXT[]="Falsche Gruppen-Auswahl"  
    CASE 20
	   USER_MSG.MSG_TXT[]="P1: Falsche Auswahl"
    CASE 21
	   USER_MSG.MSG_TXT[]="P2: Falsche Auswahl" 
    CASE 22
	   USER_MSG.MSG_TXT[]="P3: Falsche Auswahl"    
    DEFAULT
      USER_MSG.MSG_TXT[]="unbekannte Meldung"
  ENDSWITCH
  SWITCH MsgTyp
    CASE #StateMsg
        n_MBR_Handle[msg_nr] = Set_KrlMsg (#State, USER_MSG, Par[], Opt) ;Ausgabe Statusmeldung
    CASE #QuitMsg
        n_MBR_Handle[msg_nr] = Set_KrlMsg (#Quit, USER_MSG, Par[], Opt) ;Ausgabe Quittierungsmeldung
      While ( Exists_KrlMsg(  n_MBR_Handle[msg_nr]) )  ;Warten bis der Anwender quittiert
        Wait Sec 0.1
      Endwhile
    CASE #NotifyMsg
        n_MBR_Handle[msg_nr] = Set_KrlMsg (#Notify, USER_MSG, Par[], Opt) ;Ausgabe Hinweismeldung
    DEFAULT
        n_MBR_Handle[msg_nr] = Set_KrlMsg (#Quit, USER_MSG, Par[], Opt) ;Ausgabe Quittierungsmeldung
  ENDSWITCH
ENDIF  
END
;
;ENDFOLD (MB Meldungen)
;
;------------------------------------------------------
;FOLD Mutterbuckeln EK-Wert ermitteln
DEFFCT REAL GetMutterValue(MyFirstBit:OUT)
INT MyFirstBit
INT MyValue
INT N
INT MyMask
MyValue=0
MyMask=1
FOR N=MyFirstBit TO (MyFirstBit + 3)
  CONTINUE
  IF $IN[N] THEN
    MyValue=MyValue+MyMask
  ENDIF
  MyMask=MyMask*2
ENDFOR
RETURN(MyValue*0.5)
ENDFCT
;ENDFOLD

