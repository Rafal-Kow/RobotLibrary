&ACCESS  R
&COMMENT KS24.24.001_VW
&PARAM DISKPATH = VW_User
&PARAM EDITMASK = vw_usr_s
&PARAM TPVW_VERSION = 8.1.8
&REL 198
DEF VW_USR_S(USER_CMD :IN,CMD_SEL :IN,PARA1 :IN,PARA2 :IN,PARA3 :IN,PARA4 :IN,PARA5 :IN,PARA6 :IN,PARA7 :IN )
;FOLD ;%{H}%MKUKATPVW
;VW_USER Call
DECL VW_USER_CMD USER_CMD
Real PARA1, PARA2, PARA3, PARA4, PARA5, PARA6
BOOL PARA7
INT CMD_SEL
SWITCH  USER_CMD
CASE #USR_INIT
USER_INIT ()
CASE #USR_SAW
USER_SAW ()
CASE #USR_RESET
USER_RESET ()
CASE #USR_CANCEL
USER_CANCEL ()
CASE #USR_LOOP
USER_LOOP ()
CASE #USR_MAKRO_SPS
USER_MAKRO_SPS (CMD_SEL,PARA1,PARA2,PARA3,PARA4,PARA5,PARA6,PARA7)
CASE #USR_MAKRO_SAW
USER_MAKRO_SAW (CMD_SEL,PARA1,PARA2,PARA3,PARA4,PARA5,PARA6,PARA7)
CASE #USR_MAKRO_STEP
USER_MAKRO_STEP (CMD_SEL,PARA1,PARA2,PARA3,PARA4,PARA5,PARA6,PARA7)
CASE #USR_MAKRO_TRIG
USER_MAKRO_TRIG (CMD_SEL,PARA1,PARA2,PARA3,PARA4,PARA5,PARA6,PARA7)
DEFAULT
ENDSWITCH
END
;ENDFOLD
;
;-----------------------------------------------------------
;FOLD Init
DEF  USER_INIT ()
;Aufruf beim Start des SPS.SUB
;
BOOL bRet
INT i
;
;FOLD Vorbesetzung Meldungsausgabe
bRet = Clear_KrlMsg(-99)
FOR i = 1 TO 100
  n_USRS_Handle[i]=-1
  n_USRR_Handle[i]=-1
ENDFOR
;ENDFOLD
;
;FOLD Anlauf-Merker (Kaltstart)
B_Anlauf=TRUE
;ENDFOLD
;
;FOLD Vorbesetzung MyOldTime ist MyNewTime (Kaltstart)
MyNewTime=($DATE.MIN*60) + ($DATE.HOUR*3600)
MyNewDay=$DATE.DAY
MyNewMonth=$DATE.MONTH
MyNewYear=$DATE.YEAR
;
MyOldTime=MyNewTime
MyOldDay=MyNewDay
MyOldMonth=MyNewMonth
MyOldYear=MyNewYear
;
;ENDFOLD
;
;FOLD Peripherie Sharing
IF PERI_GATEW1 THEN
  $OUT[3905]=FALSE
ENDIF
IF PERI_GATEW2 THEN
  $OUT[3937]=FALSE
ENDIF
;ENDFOLD
;
;FOLD Hilfsflag fuer USER-Aufrufueberwachung ausschalten
USER_AKTIV=FALSE
;ENDFOLD
;
;FOLD Hilfsflag fuer Suchlauf korrigieren ausschalten
$FLAG[F_Suchlauf]=FALSE
;ENDFOLD
;
;FOLD Init Greiferstatus
Greif_Timer=$ROB_TIMER
;ENDFOLD
;
;FOLD Init Kuehlwasser AUS recksetzen
$FLAG[F_Medien_AUS]=FALSE
;ENDFOLD
;
;FOLD KF Ausblasen
KFRem=FALSE
TimerNr_KF=0
$OUT[O_KF_Bla_rob]=FALSE
$OUT[O_KF_Bla_rob_KW]=FALSE
$OUT[O_KF_Bla_st1]=FALSE
$OUT[O_KF_Bla_st2]=FALSE
$OUT[O_KF_Bla_st3]=FALSE
;ENDFOLD
;
;FOLD Virtuelle Achsen
VA_INIT()  
;ENDFOLD
;
;FOLD Schweisszangen
SZ_INIT()  
;ENDFOLD
;
;FOLD Bolzensteuerung 
BZ_INIT()
;ENDFOLD
;
;FOLD CleanLaser
CL_INIT()
;ENDFOLD
;
;FOLD Clinchen 
CZ_INIT()
;ENDFOLD
;
;FOLD Docking 
DK_INIT(1)
;ENDFOLD
;
;FOLD FlowDrill
FDS_INIT()
;ENDFOLD
;
;FOLD Kleben
KL_INIT()
;ENDFOLD
;
;FOLD MigMag
MS_INIT()
;ENDFOLD
;
;FOLD Mutterbuckeln
MB_INIT()
;ENDFOLD
;
;FOLD Nieten 
NZ_INIT()
;ENDFOLD
;
;FOLD Reibelement 
RW_INIT()
;ENDFOLD
;
;FOLD S_Steuerung 
SK_INIT()
;ENDFOLD
;
;FOLD SafeRobot
SRob_INIT()
;ENDFOLD
;
;FOLD Schrauben
SR_INIT()
;ENDFOLD
;
;FOLD SmartRay
SV_INIT()
;ENDFOLD
;
;FOLD StanzMutter
SM_INIT()
;ENDFOLD
;
;FOLD Stosspunkten
STP_INIT( )
;ENDFOLD 
;
;FOLD Produktion ohne Bauteil
POT_INIT()
;ENDFOLD 
;
;FOLD IPO-Taktermittlung
IPO_INIT()
;ENDFOLD
;
;FOLD Audi_EKI
A_EKI_INIT()
;ENDFOLD
;
;~~~~~~~~~VW-Teil-Anfang~~~~~~~~
;
;FOLD MIT_VW Buerstkopf 1/2 & VW_ACF
IF MIT_VwBu[1] OR MIT_VwBu[2] THEN
  BU_INIT()
ENDIF
;ENDFOLD
;
;FOLD BN_INIT 
IF MIT_BN[1] THEN
  BN_INIT()
ENDIF
;ENDFOLD
;
;FOLD VW_Greifer
  IF Mit_HLF THEN
     HLF_INIT( )
  ENDIF
;ENDFOLD
;
;~~~~~~~~~VW-Teil-Ende~~~~~~~~
;FOLD VW Fehlerauswertung
VW_FE_INIT()
;ENDFOLD
;
;FOLD VW RIP/Wasser
VW_WA_INIT()
;ENDFOLD
;
;FOLD Perceptron
PRC_INIT()
;ENDFOLD
;
;FOLD INOS
INO_INIT()
;ENDFOLD
;
;FOLD HGV
HGV_INIT()
;ENDFOLD
;
;~~~~~~~~~VW-Teil-Anfang~~~~~~~~
;FOLD GOM
IF B_MIT_GOM THEN
  GOM_INT_INIT()
ENDIF
;
;ENDFOLD (GOM )
;~~~~~~~~~VW-Teil-Ende~~~~~~~~
;
;FOLD KS Interrupt
GLOBAL INTERRUPT DECL 2 WHEN $IN[I_KS1_Ruhe] == FALSE DO KS_Abschalten(1)
INTERRUPT ON 2
GLOBAL INTERRUPT DECL 3 WHEN $IN[I_KS1_Arbeit] == FALSE DO KS_Abschalten(2)
INTERRUPT ON 3
;Adresse von I_KS2_Ruhe muss mit I_KSB2_R_SE identisch sein!!!!
GLOBAL INTERRUPT DECL 4 WHEN $IN[I_KS2_Ruhe] == FALSE DO KS_Abschalten(3)
INTERRUPT ON 4
;Adresse von I_KS2_Arbeit muss mit I_KSB2_V_SE identisch sein!!!!
GLOBAL INTERRUPT DECL 5 WHEN $IN[I_KS2_Arbeit] == FALSE DO KS_Abschalten(4)
INTERRUPT ON 5
;Adresse von I_KS3_Ruhe muss mit I_KSB1_R_SE identisch sein!!!!
GLOBAL INTERRUPT DECL 6 WHEN $IN[I_KS3_Ruhe] == FALSE DO KS_Abschalten(5)
INTERRUPT ON 6
;Adresse von I_KS3_Arbeit muss mit I_KSB1_V_SE identisch sein!!!!
GLOBAL INTERRUPT DECL 7 WHEN $IN[I_KS3_Arbeit] == FALSE DO KS_Abschalten(6)
INTERRUPT ON 7
;
GLOBAL INTERRUPT DECL 8 WHEN $IN[I_R_KW1_vorh] == TRUE DO KW_vorhanden()
INTERRUPT ON 8
;ENDFOLD
;
END
;ENDFOLD
;
;-----------------------------------------------------------
;FOLD Satzanwahl
DEF  USER_SAW ()
;Aufruf bei Verlust der Satzkoinzidenz (z.B. Satzanwahl)
BOOL bRet
;
;FOLD Vorbesetzung Meldungsausgabe
bRet = Clear_KrlMsg(-99)
;
;FOLD Tool_corr + Base_corr ruecksetzen
Tool_Corr=$NULLFRAME
Base_Corr=$NULLFRAME
;ENDFOLD
;
;FOLD Hilfsflag fuer USER-Aufrufueberwachung ausschalten
USER_AKTIV=FALSE
;ENDFOLD
;
;FOLD Hilfsflag fuer Suchlauf korrigieren ausschalten
$FLAG[F_Suchlauf]=FALSE
;ENDFOLD
;
;FOLD KF Ausblasen
KFRem=FALSE
TimerNr_KF=0
$OUT[O_KF_Bla_rob]=FALSE
$OUT[O_KF_Bla_rob_KW]=FALSE
$OUT[O_KF_Bla_st1]=FALSE
$OUT[O_KF_Bla_st2]=FALSE
$OUT[O_KF_Bla_st3]=FALSE
;ENDFOLD
;
;FOLD Bolzensteuerung 
IF (MIT_Bolzen_1 OR MIT_Bolzen_2) THEN
  BZ_SAW()
ENDIF  
;ENDFOLD
;
;FOLD CleanLaser
IF MIT_CL THEN
  CL_SAW( )
ENDIF  
;ENDFOLD
;
;FOLD Clinchen
IF (MIT_CZ1_Serv OR MIT_CZ2_Serv OR MIT_CZ1_Pneu OR MIT_CZ2_Pneu) THEN
  CZ_SAW( )
ENDIF  
;ENDFOLD
;
;FOLD FlowDrill 
IF (MIT_FDS1 OR MIT_FDS2) THEN
  FDS_SAW()
ENDIF  
;ENDFOLD
;
;FOLD Kleben 
IF (MIT_Kleben_1 OR MIT_Kleben_2 OR MIT_Kleben_3) THEN
  KL_SAW()
ENDIF  
;ENDFOLD
;
;FOLD MigMag 
IF (MIT_MIG1 OR MIT_MIG2) THEN
  MS_SAW()
ENDIF  
;ENDFOLD
;
;FOLD Mutterbuckeln 
IF (MIT_MB1 OR MIT_MB2) THEN
  MB_SAW()
ENDIF  
;ENDFOLD
;
;FOLD Nieten 
IF (MIT_NZ1_Serv OR MIT_NZ1_Hydr OR MIT_NZ2_Serv OR MIT_NZ2_Hydr) THEN
  NZ_SAW()
ENDIF  
;ENDFOLD
;
;FOLD Reibelement
IF (MIT_RW1 OR MIT_RW2) AND (SZ_VORHANDEN==FALSE) THEN
  RW_SAW( )
ENDIF
;ENDFOLD  
;
;FOLD SafeRobot
IF Mit_Safe_Rob THEN
  SRob_SAW( )
ENDIF
;ENDFOLD  
;
;FOLD Schrauben
IF MIT_SR THEN
  SR_SAW( )
ENDIF
;ENDFOLD
;
;FOLD SmartRay
IF MIT_SV1 OR MIT_SV2 THEN
  SV_SAW( )
ENDIF
;ENDFOLD
;
;FOLD StanzMutter
IF MIT_SM1 OR MIT_SM2 THEN
  SM_SAW( )
ENDIF
;ENDFOLD
;
;FOLD Stosspunkten
IF MIT_Stossp AND (SZ_VORHANDEN==FALSE) THEN
  STP_SAW( )
ENDIF  
;ENDFOLD 
;
;FOLD VirtualAxis
IF SZ_VORHANDEN THEN
  VA_SAW( )
ENDIF
;ENDFOLD
;
;FOLD Produktion ohne Bauteil
POT_SAW( )
;ENDFOLD
;
;FOLD VW_Greifer
  IF Mit_HLF THEN
     HLF_SAW( )
  ENDIF
;ENDFOLD
;FOLD Schweisszangen
IF (($softplcint[1]>0) OR ($softplcint[2]>0) OR ($softplcint[3]>0)) THEN
  SZ_SAW( )
ENDIF
;ENDFOLD
;
;FOLD Audi_EKI-Schnittstelle
IF MIT_EKI THEN
  A_EKI_SAW()
ENDIF
;ENDFOLD
;
;FOLD Vision-Lieferant Perceptron Reset-Signals
IF B_MIT_PRC THEN
PRC_ResetSig()
ENDIF
;ENDFOLD
;
;FOLD Vision-Lieferant INOS Reset-IOSignals
IF B_MIT_INOS THEN
  INO_RstIO()
ENDIF
;ENDFOLD
;
;~~~~~~~~~VW-Teil-Anfang~~~~~~~~
;FOLD GOM Reset-Signals
IF B_MIT_GOM THEN
  GOM_ResetSignals()
ENDIF
;ENDFOLD (GOM Reset-Signals)
;
;~~~~~~~~~VW-Teil-Ende~~~~~~~~
;
END
;ENDFOLD
;
;-----------------------------------------------------------
;FOLD Reset
DEF  USER_RESET ()
;Aufruf bei Programmreset
INT i
BOOL bRet
;
;FOLD Vorbesetzung Meldungsausgabe
bRet = Clear_KrlMsg(-99)
;
;FOLD Peripherie Sharing
IF PERI_GATEW1 THEN
  $OUT[3905]=FALSE
ENDIF
IF PERI_GATEW2 THEN
  $OUT[3937]=FALSE
ENDIF
;ENDFOLD
;
;FOLD Hilfsflag fuer USER-Aufrufueberwachung ausschalten
USER_AKTIV=FALSE
;ENDFOLD
;
;FOLD Hilfsflag fuer Suchlauf korrigieren ausschalten
$FLAG[F_Suchlauf]=FALSE
;ENDFOLD
;
;FOLD Reset Kuehlwasser AUS
$FLAG[F_Medien_AUS]=FALSE
;ENDFOLD
;
;FOLD Tool_corr + Base_corr ruecksetzen
Tool_Corr=$NULLFRAME
Base_Corr=$NULLFRAME
;ENDFOLD
;
;FOLD KF Ausblasen
KFRem=FALSE
TimerNr_KF=0
$OUT[O_KF_Bla_rob]=FALSE
$OUT[O_KF_Bla_rob_KW]=FALSE
$OUT[O_KF_Bla_st1]=FALSE
$OUT[O_KF_Bla_st2]=FALSE
$OUT[O_KF_Bla_st3]=FALSE
;ENDFOLD
;
;FOLD Bolzensteuerung 
IF (MIT_Bolzen_1 OR MIT_Bolzen_2) THEN
  BZ_RESET()
ENDIF  
;ENDFOLD
;
;FOLD CleanLaser
IF MIT_CL THEN
  CL_RESET( )
ENDIF  
;ENDFOLD
;
;FOLD Clinchen
IF (MIT_CZ1_Serv OR MIT_CZ2_Serv OR MIT_CZ1_Pneu OR MIT_CZ2_Pneu) THEN
  CZ_RESET( )
ENDIF  
;ENDFOLD
;
;FOLD FlowDrill 
IF (MIT_FDS1 OR MIT_FDS2) THEN
  FDS_RESET()
ENDIF  
;ENDFOLD
;
;FOLD Kleben 
IF (MIT_Kleben_1 OR MIT_Kleben_2 OR MIT_Kleben_3) THEN
  KL_RESET()
ENDIF  
;ENDFOLD
;
;FOLD MigMag 
IF (MIT_MIG1 OR MIT_MIG2) THEN
  MS_RESET()
ENDIF  
;ENDFOLD
;
;FOLD Mutterbuckeln 
IF (MIT_MB1 OR MIT_MB2) THEN
  MB_RESET()
ENDIF  
;ENDFOLD
;
;FOLD Nieten 
IF (MIT_NZ1_Serv OR MIT_NZ1_Hydr OR MIT_NZ2_Serv OR MIT_NZ2_Hydr) THEN
  NZ_RESET()
ENDIF  
;ENDFOLD
;
;FOLD Reibelement
IF (MIT_RW1 OR MIT_RW2) AND (SZ_VORHANDEN==FALSE) THEN
  RW_RESET( )
ENDIF
;ENDFOLD  
;
;FOLD SafeRobot
IF Mit_Safe_Rob THEN
  SRob_RESET( )
ENDIF
;ENDFOLD  
;
;FOLD Schrauben
IF MIT_SR THEN
  SR_RESET( )
ENDIF
;ENDFOLD
;
;FOLD SmartRay
IF MIT_SV1 OR MIT_SV2 THEN
  SV_RESET( )
ENDIF
;ENDFOLD
;
;FOLD StanzMutter
IF MIT_SM1 OR MIT_SM2 THEN
  SM_RESET( )
ENDIF
;ENDFOLD
;
;FOLD Stosspunkten
IF MIT_Stossp AND (SZ_VORHANDEN==FALSE) THEN
  STP_RESET( )
ENDIF  
;ENDFOLD 
;
;FOLD VirtualAxis
IF SZ_VORHANDEN THEN
  VA_RESET( )
ENDIF
;ENDFOLD
;
;FOLD Produktion ohne Bauteil
POT_RESET( )
;ENDFOLD
;
;FOLD VW_Greifer
  IF Mit_HLF THEN
     HLF_RESET( )
  ENDIF
;ENDFOLD
;
;FOLD Schweisszangen
IF (($softplcint[1]>0) OR ($softplcint[2]>0) OR ($softplcint[3]>0)) THEN
  SZ_RESET( )
ENDIF
;ENDFOLD
;
;FOLD Audi_EKI-Schnittstelle
IF MIT_EKI THEN
  A_EKI_RESET()
ENDIF
;ENDFOLD
;
;FOLD Vision-Lieferant Perceptron Reset-Signals
IF B_MIT_PRC THEN
PRC_ResetSig()
ENDIF
;ENDFOLD
;
;FOLD Vision-Lieferant INOS Reset-Signals/Variables
IF B_MIT_INOS THEN
  INO_RstIO()
  INO_RstVars()
ENDIF
;ENDFOLD
;;FOLD BN Reset-Signals
IF MIT_BN[1] THEN
  BN_RESET()
ENDIF
;ENDFOLD (BN Reset-Signals)
;
END
;ENDFOLD

;
;-----------------------------------------------------------
;FOLD Cancel
DEF  USER_CANCEL ()
;Aufruf bei Programmabwahl
;
INT i
;
;FOLD Peripherie Sharing
IF PERI_GATEW1 THEN
  $OUT[3905]=FALSE
ENDIF
IF PERI_GATEW2 THEN
  $OUT[3937]=FALSE
ENDIF
;ENDFOLD
;
;FOLD Hilfsflag fuer USER-Aufrufueberwachung ausschalten
USER_AKTIV=FALSE
;ENDFOLD
;
;FOLD Hilfsflag fuer Suchlauf korrigieren ausschalten
$FLAG[F_Suchlauf]=FALSE
;ENDFOLD
;
;FOLD Kuehlwasser AUS ruecksetzen
$FLAG[F_Medien_AUS]=FALSE
;ENDFOLD
;
;FOLD Tool_corr + Base_corr ruecksetzen
Tool_Corr=$NULLFRAME
Base_Corr=$NULLFRAME
;ENDFOLD
;
;FOLD KF Ausblasen
KFRem=FALSE
TimerNr_KF=0
$OUT[O_KF_Bla_rob]=FALSE
$OUT[O_KF_Bla_rob_KW]=FALSE
$OUT[O_KF_Bla_st1]=FALSE
$OUT[O_KF_Bla_st2]=FALSE
$OUT[O_KF_Bla_st3]=FALSE
;ENDFOLD
;
;FOLD Bolzensteuerung 
IF (MIT_Bolzen_1 OR MIT_Bolzen_2) THEN
  BZ_CANCEL()
ENDIF  
;ENDFOLD
;
;FOLD CleanLaser
IF MIT_CL THEN
  CL_CANCEL( )
ENDIF  
;ENDFOLD
;
;FOLD Clinchen
IF (MIT_CZ1_Serv OR MIT_CZ2_Serv OR MIT_CZ1_Pneu OR MIT_CZ2_Pneu) THEN
  CZ_CANCEL( )
ENDIF  
;ENDFOLD
;
;FOLD FlowDrill 
IF (MIT_FDS1 OR MIT_FDS2) THEN
  FDS_CANCEL()
ENDIF  
;ENDFOLD
;
;FOLD Kleben 
IF (MIT_Kleben_1 OR MIT_Kleben_2 OR MIT_Kleben_3) THEN
  KL_CANCEL()
ENDIF  
;ENDFOLD
;
;FOLD MigMag 
IF (MIT_MIG1 OR MIT_MIG2) THEN
  MS_CANCEL()
ENDIF  
;ENDFOLD
;
;FOLD Mutterbuckeln 
IF (MIT_MB1 OR MIT_MB2) THEN
  MB_CANCEL()
ENDIF  
;ENDFOLD
;
;FOLD Nieten 
IF (MIT_NZ1_Serv OR MIT_NZ1_Hydr OR MIT_NZ2_Serv OR MIT_NZ2_Hydr) THEN
  NZ_CANCEL()
ENDIF  
;ENDFOLD
;
;FOLD Reibelement
IF (MIT_RW1 OR MIT_RW2) AND (SZ_VORHANDEN==FALSE) THEN
  RW_CANCEL( )
ENDIF
;ENDFOLD  
;
;FOLD SafeRobot
IF Mit_Safe_Rob THEN
  SRob_CANCEL( )
ENDIF
;ENDFOLD  
;
;FOLD Schrauben
IF MIT_SR THEN
  SR_CANCEL( )
ENDIF
;ENDFOLD
;
;FOLD SmartRay
IF MIT_SV1 OR MIT_SV2 THEN
  SV_CANCEL( )
ENDIF
;ENDFOLD
;
;FOLD StanzMutter
IF MIT_SM1 OR MIT_SM2 THEN
  SM_CANCEL( )
ENDIF
;ENDFOLD
;
;FOLD Stosspunkten
IF MIT_Stossp AND (SZ_VORHANDEN==FALSE) THEN
  STP_CANCEL( )
ENDIF  
;ENDFOLD 
;
;FOLD VirtualAxis
IF SZ_VORHANDEN THEN
  VA_CANCEL( )
ENDIF
;ENDFOLD
;
;FOLD Produktion ohne Bauteil
POT_CANCEL( )
;ENDFOLD
;
;FOLD VW_Greifer
  IF Mit_HLF THEN
     HLF_CANCEL( )
  ENDIF
;ENDFOLD
;
;FOLD Schweisszangen
IF (($softplcint[1]>0) OR ($softplcint[2]>0) OR ($softplcint[3]>0)) THEN
  SZ_CANCEL( )
ENDIF
;ENDFOLD
;
;FOLD Audi_EKI-Schnittstelle
IF MIT_EKI THEN
  A_EKI_CANCEL()
ENDIF
;ENDFOLD
;
;FOLD Vision-Lieferant Perceptron Reset-Signals
IF B_MIT_PRC THEN
PRC_ResetSig()
ENDIF
;ENDFOLD
;
;FOLD Vision-Lieferant INOS Reset-Signals/Variables
IF B_MIT_INOS THEN
  INO_RstIO()
  INO_RstVars()
ENDIF
;ENDFOLD
;
END
;ENDFOLD
;
;-----------------------------------------------------------
;FOLD Loop
DEF  USER_LOOP ()
;zyklischer Aufruf im SPS.SUB
; 
;*-----------------------------------------------------*
;*                                                     *
; Technologiepaket Basic                               *
; Konzernstandard                                      *
; Bearbeiter: W. Lehmeier I/PG-C61                     *
;*                                                     *
; Erstellt am:                                         *
; 2011.12.08 LE                                        *
;*                                                     *
;*-----------------------------------------------------*
;*                                                     *
INT i, TOUT, ret
BOOL bRet
;
;FOLD Version Techpaket
Version_Tech_Basic=20171110
Tech_Basic.Name[]="KS24.24.001VW_171110"
;ENDFOLD
;
;FOLD Auswahl Technologiepaket
$OUT[O_TECH_BASIC]=TRUE
$OUT[O_TECH_LASER]=FALSE
;ENDFOLD
;
;FOLD PoT aktiv
$OUT[O_R_PoT_akt] = $IN[I_FT_o_BT]
;ENDFOLD
;
;FOLD Vorwahl von Prozessgeraete und Statusmeldungen an BMS
;
  ;FOLD Abschaltung erlaubt
  $OUT[O_R_Abs_erl] = $OUT[O_R_steht] AND ($OUT[O_R_PFO] OR $OUT[O_R_Wart] OR $OUT[O_R_WartB])
  ;ENDFOLD
;
  ;FOLD Einschaltverzoegerung
  IF NOT $COULD_START_MOTION THEN
    $timer[TimerNr_Ein]=-6000 
    $timer_stop[TimerNr_Ein]=TRUE
  ELSE  
    $timer_stop[TimerNr_Ein]=FALSE
  ENDIF
  ;ENDFOLD  
;
  ;FOLD flexibles Docking
  ;Mit flexiblen Docking
  IF $FLAG[F_m_flex_DK] THEN
    MIT_flex_DK=TRUE
  ELSE
    MIT_flex_DK=FALSE
  ENDIF
  ;
  ;FOLD Verzoegerter IBS-Reset nach Hibernate  
  MyNewTime=($DATE.MIN*60) + ($DATE.HOUR*3600)
  MyNewDay=$DATE.DAY
  MyNewMonth=$DATE.MONTH
  MyNewYear=$DATE.YEAR
  IF (MyNewTime > MyOldTime) OR (MyNewDay > MyOldDay) OR (MyNewMonth > MyOldMonth) OR (MyNewYear > MyOldYear) THEN
    Hibernate=TRUE
    Hibernate_2=TRUE
    MyRobTimer=$ROB_TIMER
  ENDIF
  IF Hibernate AND NOT IBS_RESET THEN
    IF ($ROB_TIMER > (MyRobTimer + (ResetTimeOut*1000))) THEN
      Ret=IOCTL("IBS1",12,1)
      IBS_RESET=TRUE
    ENDIF
    IF IBS_RESET THEN
      Hibernate=FALSE
      IBS_RESET=FALSE
    ENDIF      
  ENDIF
  MyOldTime=($DATE.MIN*60) + ($DATE.HOUR*3600) + HiberTime
  MyOldDay=$DATE.DAY
  MyOldMonth=$DATE.MONTH
  MyOldYear=$DATE.YEAR
  IF Hibernate_2 AND $COULD_START_MOTION THEN
    IF schleppfehler AND NOT $softplcbool[5] AND NOT $softplcbool[6] AND (sf_prog_status<>#SZ_io) THEN
      sf_prog_status=#SZ_io
      schleppfehler = FALSE
    ENDIF 
  ENDIF    
  IF Hibernate_2 AND $OUT[O_R_Proz_akt] AND $OUT[O_R_bewegt] AND ($softplcbool[5]==FALSE) THEN
    Hibernate_2=FALSE
  ENDIF  
  ;ENDFOLD
;
  ;FOLD Energiesparmodus
  IF $FLAG[F_m_e_Mode] THEN
    Mit_e_Mode=TRUE
  ELSE
    Mit_e_Mode=FALSE
  ENDIF    
  IF ($Brake_Sig>0) THEN 
    e_Mode_Hilf=FALSE
  ELSE
    IF NOT $COULD_START_MOTION THEN
      e_Mode_Hilf=TRUE
    ENDIF
  ENDIF    
  IF (NOT Mit_e_Mode OR ($Brake_Sig>0) OR (e_Mode_Hilf AND $COULD_START_MOTION)) THEN
    $timer[TimerNr_E_Mo]=-20000 
    $timer_stop[TimerNr_E_Mo]=TRUE
    e_Mode_Hilf=FALSE
  ELSE
    IF $timer[TimerNr_E_Mo]<1000 THEN
      $timer_stop[TimerNr_E_Mo]=FALSE  
    ELSE
      $timer_stop[TimerNr_E_Mo]=TRUE
    ENDIF  
  ENDIF
  e_Mode_Hilf2=((($OUT[O_R_PFO] AND NOT $IN[I_R_SRB]) OR (NOT $OUT[O_R_PFO] AND $OUT[O_R_WSLAV])) AND NOT $OUT[O_R_WPROZ])  
  ;ENDFOLD
;
  ;FOLD Merker Spannungsausfall
  IF $power_fail THEN
    $FLAG[F_R_PDown]=TRUE
  ENDIF 
  ;ENDFOLD  
;
  ;FOLD Akkutest
  IF (($ACCU_STATE==#charge_ok_low) OR ($ACCU_STATE==#charge_test_nok) OR ($ACCU_STATE==#charge_nok) OR ($ACCU_STATE==#charge_off)) AND $OUT[O_R_Bereit] THEN
    $OUT[O_R_WAR_BAT]=TRUE
  ELSE  
    $OUT[O_R_WAR_BAT]=FALSE
  ENDIF
  ;ENDFOLD 
;
  ;FOLD HD Abschaltung bei Energiesparmodus
;
  IF $FLAG[F_HD_AUS_E] THEN
   Mit_HD_AUS_Emode=TRUE
  ELSE
   Mit_HD_AUS_Emode=FALSE
  ENDIF
;  
  IF Mit_HD_AUS_Emode THEN
    IF NOT $OUT[O_SZ1_E_Mode] AND NOT $OUT[O_SZ2_E_Mode] AND NOT $OUT[O_SZ3_E_Mode] THEN
      $timer[T_Nr_LuftAus]=-HD_AUS_DELAY 
      $timer_stop[T_Nr_LuftAus]=TRUE
    ELSE  
      $timer_stop[T_Nr_LuftAus]=FALSE
    ENDIF
; 
    IF $timer_flag[T_Nr_LuftAus] THEN   ;Luft AUS bei Timerablauf 
      IF $OUT[O_SZ1_E_Mode] THEN
         $OUT[O_RP1_HD_EIN] = FALSE
         $OUT[O_RP1_HD_AUS] = TRUE
      ENDIF
;
      IF $OUT[O_SZ2_E_Mode] THEN
         $OUT[O_RP2_HD_EIN] = FALSE
         $OUT[O_RP2_HD_AUS] = TRUE
      ENDIF    
;
      IF $OUT[O_SZ3_E_Mode] THEN
         $OUT[O_RP3_HD_EIN] = FALSE
         $OUT[O_RP3_HD_AUS] = TRUE
      ENDIF  
;	  
    ELSE  ;Luft EIN
      IF NOT $OUT[O_SZ1_E_Mode] THEN
         IF ($OUT[O_RP1_HD_EIN]==FALSE) THEN
             $FLAG[930] = TRUE
         ENDIF        
         $OUT[O_RP1_HD_EIN] = TRUE
         $OUT[O_RP1_HD_AUS] = FALSE   
      ENDIF
      IF NOT $OUT[O_SZ2_E_Mode] THEN
         $OUT[O_RP2_HD_EIN] = TRUE
         $OUT[O_RP2_HD_AUS] = FALSE   
      ENDIF     
      IF NOT $OUT[O_SZ3_E_Mode] THEN
         $OUT[O_RP3_HD_EIN] = TRUE
         $OUT[O_RP3_HD_AUS] = FALSE  
      ENDIF		 
    ENDIF
;
  ENDIF
  ;ENDFOLD
;
  ;FOLD Init Greiferstatus an BMS melden
  IF $FLAG[F_m_Greif_St] THEN
    Mit_Greif_St=TRUE
  ELSE
    Mit_Greif_St=FALSE
  ENDIF   
  IF Mit_Greif_St AND $OUT[O_R_Proz_akt] AND NOT $ROB_STOPPED  AND NOT B_Grei_Stat THEN
    IF ($ROB_TIMER > (Greif_Timer + 3000)) THEN
      B_Grei_Stat=TRUE
    ENDIF
  ENDIF 
  IF Mit_Greif_St AND $OUT[O_R_Proz_akt] AND $ROB_STOPPED  AND NOT B_Grei_Stat THEN
    IF ($ROB_TIMER > (Greif_Timer + 1000)) THEN
      B_Grei_Stat=TRUE
    ENDIF
  ENDIF  
  ;ENDFOLD  
;
;~~~~~~~~~VW-Teil-Anfang~~~~~~~~
  ;FOLD Typinfo an BMS melden
  IF $FLAG[F_m_Typinfo] AND NOT $FLAG[F_m_Greif_St] THEN
    $OUT[233] = $CYCFLAG[199]
    $OUT[234] = $CYCFLAG[198]
    $OUT[235] = $CYCFLAG[197]
    $OUT[236] = $CYCFLAG[196]
    $OUT[237] = $CYCFLAG[195]
    $OUT[238] = $CYCFLAG[194]
    $OUT[239] = $CYCFLAG[193]
    $OUT[240] = $CYCFLAG[192]   
  ENDIF
  ;ENDFOLD  
;~~~~~~~~~VW-Teil-Ende~~~~~~~~
;
  ;FOLD SZ
  IF SZ_VORHANDEN THEN
;
    ;FOLD Kombisteuerung
    ;Kombisteuerung 1    
    IF $FLAG[F_m_Komb_ST1] THEN
      Mit_Komb_ST1=TRUE
    ELSE
      Mit_Komb_ST1=FALSE
    ENDIF
;    
    ;Kombisteuerung 2    
    IF $FLAG[F_m_Komb_ST2] THEN
      Mit_Komb_ST2=TRUE
    ELSE
      Mit_Komb_ST2=FALSE
    ENDIF
;    
    ;Kombisteuerung 3    
    IF $FLAG[F_m_Komb_ST3] THEN
      Mit_Komb_ST3=TRUE
    ELSE
      Mit_Komb_ST3=FALSE
    ENDIF
;
    ;Kombisteuerung vorhanden
    Mit_Komb_ST=(Mit_Komb_ST1 OR Mit_Komb_ST2 OR Mit_Komb_ST3)
    ;ENDFOLD 
;
    ;FOLD SZ1
    IF ($softplcint[1]>0) THEN
      SZ1_LOOP( )
    ENDIF
    ;ENDFOLD    
;
    ;FOLD SZ2
    IF ($softplcint[2]>0) THEN
      SZ2_LOOP( )
    ENDIF
    ;ENDFOLD
;
    ;FOLD SZ3
    IF ($softplcint[3]>0) THEN
      SZ3_LOOP( )
    ENDIF
    ;ENDFOLD
;
;~~~~~~~~~VW-Teil-Anfang~~~~~~~~
;
    ;Mit Mutternbuckeln 1 VW-Variante V3
    IF $FLAG[F_m_BM1_Einz] OR $FLAG[F_m_BM1_Dopp] THEN
      BM1_LOOP( )
    ENDIF
;
    ;Mit Mutternbuckeln 2 VW-Variante V3
    IF $FLAG[F_m_BM2_Einz] OR $FLAG[F_m_BM2_Dopp] THEN
      BM2_LOOP( )
    ENDIF
;
;~~~~~~~~~VW-Teil-Ende~~~~~~~~
;
    ;FOLD Q-Tool
    ;Mit Qualitaetsueberwachung
    IF $FLAG[F_m_Q_Tool] THEN
      MIT_Q_Tool=TRUE
    ELSE
      MIT_Q_Tool=FALSE
    ENDIF 
    ;ENDFOLD
;
    ;FOLD EK-Verschleiss mit Vorzeichen
    IF $FLAG[F_m_EK_Vorz] THEN
      MIT_Val_N=TRUE
    ELSE
      MIT_Val_N=FALSE
    ENDIF  
    ;ENDFOLD  
;
    ;FOLD SZ INIT Zangenfunktion
    IF (R1AusgleichFunktion>0) AND NOT $COULD_START_MOTION THEN
      R1AusgleichFunktion=0
      Basic_S_Msg(1,#NotifyMsg)
    ENDIF
    ;ENDFOLD
;
    ;FOLD SZ Vorwahlen beim Skalieren
    ;Vorwahl Skalieren Kraft in AUTO ruecksetzen
    IF $OUT[O_R_Auto] THEN
      $FLAG[F_SZ_Kr_Skal]=FALSE
    ENDIF
;
    ;Vorwahl Skalieren Strom in AUTO ruecksetzen
    IF $OUT[O_R_Auto] THEN
      $FLAG[F_SZ_St_Skal]=FALSE
    ENDIF
    ;ENDFOLD    
;
  ENDIF ;SZ_VORHANDEN
  ;ENDFOLD von FOLD SZ
;
  ;FOLD Stosspunkten 
  ;Mit Stosspunkten
  IF $FLAG[F_m_Stossp] THEN
    MIT_Stossp=TRUE
  ELSE
    MIT_Stossp=FALSE
  ENDIF
  IF MIT_Stossp AND (SZ_VORHANDEN==FALSE) THEN
    STP_LOOP( )
  ENDIF
  ;ENDFOLD  
;  
  ;FOLD Vorwahl Kappenfraeser
  IF $FLAG[F_m_Braeu_KF] THEN
    Mit_Braeu_KF=TRUE
  ELSE
    Mit_Braeu_KF=FALSE
  ENDIF
  IF $FLAG[F_m_Lutz_KF] OR NOT ($FLAG[F_m_Braeu_KF] AND $FLAG[F_m_Lutz_KF] )THEN
    Mit_Lutz_KF=TRUE
  ELSE
    Mit_Lutz_KF=FALSE
  ENDIF 
  ;ENDFOLD   
;
  ;FOLD SK1
  ;Mit Schweisssteuerung 1
  IF $FLAG[F_m_SK1] THEN
    MIT_SK1=TRUE
  ELSE
    MIT_SK1=FALSE
  ENDIF
;
  IF $FLAG[F_2SZ_a_SK1] THEN
    Mit_2SZ_an_SK1=TRUE
  ELSE
    Mit_2SZ_an_SK1=FALSE
  ENDIF
  IF MIT_SK1 AND NOT Mit_Komb_ST1 THEN
    SK1_LOOP( )
  ENDIF  
  ;ENDFOLD
;
  ;FOLD SK2
  ;Mit Schweisssteuerung 2
  IF $FLAG[F_m_SK2] THEN
    MIT_SK2=TRUE
  ELSE
    MIT_SK2=FALSE
  ENDIF
  IF MIT_SK2 AND NOT Mit_Komb_ST2 THEN
    SK2_LOOP( )
  ENDIF  
  ;ENDFOLD
;
  ;FOLD SK3
  ;Mit Schweisssteuerung 3
  IF $FLAG[F_m_SK3] THEN
    MIT_SK3=TRUE
  ELSE
    MIT_SK3=FALSE
  ENDIF
  IF MIT_SK3 THEN
    SK3_LOOP( )
  ENDIF  
  ;ENDFOLD
;
  ;FOLD SM1
  ;Mit Stanzen Muttern/Bolzen 1
  IF $FLAG[F_m_SM1] THEN
    MIT_SM1=TRUE
  ELSE
    MIT_SM1=FALSE
  ENDIF
  IF MIT_SM1 THEN
    SM1_LOOP( )
  ENDIF  
  ;ENDFOLD
;
  ;FOLD SM2
  ;Mit Stanzen Muttern/Bolzen 2
  IF $FLAG[F_m_SM2] THEN
    MIT_SM2=TRUE
  ELSE
    MIT_SM2=FALSE
  ENDIF
  IF MIT_SM2 THEN
    SM2_LOOP( )
  ENDIF  
  ;ENDFOLD
;
   ;FOLD Kleben 1
  ;Mit Kleben 1
  IF $FLAG[F_m_KL1] THEN
    MIT_Kleben_1=TRUE
  ELSE
    MIT_Kleben_1=FALSE
  ENDIF
;
  IF MIT_Kleben_1 THEN
    KL1_LOOP( )
  ENDIF  
  ;ENDFOLD
;
  ;FOLD Kleben 2
  ;Mit Kleben 2
  IF $FLAG[F_m_KL2] THEN
    MIT_Kleben_2=TRUE
  ELSE
    MIT_Kleben_2=FALSE
  ENDIF
;
  IF MIT_Kleben_2 THEN
    KL2_LOOP( )
  ENDIF  
  ;ENDFOLD  
;
  ;FOLD Kleben 3
  ;Mit Kleben 3
  IF $FLAG[F_m_KL3] THEN
    MIT_Kleben_3=TRUE
  ELSE
    MIT_Kleben_3=FALSE
  ENDIF
;
  IF MIT_Kleben_3 THEN
    KL3_LOOP( )
  ENDIF  
  ;ENDFOLD    
;
  ;FOLD Nieten Servo 1
  ;Mit Nieten Servo 1
  IF $FLAG[F_m_NZ1_Serv] AND NOT MIT_RW2 THEN
    MIT_NZ1_Serv=TRUE
  ELSE
    MIT_NZ1_Serv=FALSE
  ENDIF
;
  IF MIT_NZ1_Serv THEN
    NZ1_LOOP( )
  ENDIF  
  ;ENDFOLD
;
  ;FOLD Nieten Servo 2
  ;Mit Nieten Servo 2
  IF $FLAG[F_m_NZ2_Serv] THEN
    MIT_NZ2_Serv=TRUE
  ELSE
    MIT_NZ2_Serv=FALSE
  ENDIF
;
  IF MIT_NZ2_Serv AND NOT MIT_RW1 THEN
    NZ2_LOOP( )
  ENDIF    
 ;ENDFOLD
;
  ;FOLD Nieten Hydraulisch 1
  ;Mit Nieten Hydraulisch 1
  IF $FLAG[F_m_NZ1_Hydr] THEN
    MIT_NZ1_Hydr=TRUE
  ELSE
    MIT_NZ1_Hydr=FALSE
  ENDIF
;
  IF MIT_NZ1_Hydr AND NOT MIT_RW2 THEN
    NZ1_H_LOOP( )
  ENDIF   
  ;ENDFOLD
;
  ;FOLD Nieten Hydraulisch 2
  ;Mit Nieten Hydraulisch 2
  IF $FLAG[F_m_NZ2_Hydr] THEN
    MIT_NZ2_Hydr=TRUE
  ELSE
    MIT_NZ2_Hydr=FALSE
  ENDIF
;
  IF MIT_NZ2_Hydr AND NOT MIT_RW1 THEN
    NZ2_H_LOOP( )
  ENDIF     
  ;ENDFOLD
;
;~~~~~~~~~VW-Teil-Anfang~~~~~~~~
 ;FOLD Blindnietmuttern 1
  ;Mit Blindnietmuttern 1
  IF $FLAG[F_m_BN[1]] THEN
    MIT_BN[1]=TRUE
  ELSE
    IF $OUT[O_R_PFO] AND $OUT[O_R_SAK] THEN
      MIT_BN[1]=FALSE
    ENDIF
  ENDIF  
  ;
  IF MIT_BN[1] THEN
    BN_LOOP()
  ENDIF
  ;ENDFOLD
  ;~~~~~~~~~VW-Teil-Ende~~~~~~~~
  ;
  ;FOLD Reibelement 1
  ;Mit Reibelement 1
  IF $FLAG[F_m_RW1]  THEN
    MIT_RW1=TRUE
  ELSE
    MIT_RW1=FALSE
  ENDIF
;
  IF MIT_RW1 AND NOT MIT_NZ2_Serv THEN
    RW1_LOOP( )
  ENDIF
  ;ENDFOLD  
;
  ;FOLD Reibelement 2
  ;Mit Reibelement 2
  IF $FLAG[F_m_RW2]  THEN
    MIT_RW2=TRUE
  ELSE
    MIT_RW2=FALSE
  ENDIF
;
  IF MIT_RW2 AND NOT MIT_NZ1_Serv THEN
    RW2_LOOP( )
  ENDIF
  ;ENDFOLD 
;
  ;FOLD Clinchen Servo 1
  ;Mit Clinchen Servo 1
  IF $FLAG[F_m_CZ1_Serv] THEN
    MIT_CZ1_Serv=TRUE
  ELSE
    MIT_CZ1_Serv=FALSE
  ENDIF
;
  IF MIT_CZ1_Serv THEN
    CZ1_LOOP( )
  ENDIF
  ;ENDFOLD
;
  ;FOLD Clinchen Servo 2
  ;Mit Clinchen Servo 2
  IF $FLAG[F_m_CZ2_Serv] THEN
    MIT_CZ2_Serv=TRUE
  ELSE
    MIT_CZ2_Serv=FALSE
  ENDIF
;
  IF MIT_CZ2_Serv THEN
    CZ2_LOOP( )
  ENDIF
  ;ENDFOLD
;
  ;FOLD Clinchen Pneumatisch 1
  ;Mit Clinchen Pneumatisch 1
  IF $FLAG[F_m_CZ1_Pneu] THEN
    MIT_CZ1_Pneu=TRUE
  ELSE
    MIT_CZ1_Pneu=FALSE
  ENDIF
;
  IF MIT_CZ1_Pneu THEN
    CZ1_P_LOOP( )
  ENDIF
  ;ENDFOLD
;
  ;FOLD Clinchen Pneumatisch 2
  ;Mit Clinchen Pneumatisch 2
  IF $FLAG[F_m_CZ2_Pneu] THEN
    MIT_CZ2_Pneu=TRUE
  ELSE
    MIT_CZ2_Pneu=FALSE
  ENDIF
;
  IF MIT_CZ2_Pneu THEN
    CZ2_P_LOOP( )
  ENDIF
  ;ENDFOLD
  ;
  ;FOLD Flat-Clinchen 1
  ;Mit Flat-Clinchen 1
  IF $FLAG[F_m_CZ1_Flat] THEN
    MIT_CZ1_Flat=TRUE
  ELSE
    MIT_CZ1_Flat=FALSE
  ENDIF
;
  IF MIT_CZ1_Flat THEN
    CZ1_FL_LOOP( )
  ENDIF
  ;ENDFOLD
;
  ;FOLD MIG1
  ;Mit MIG 1
  IF $FLAG[F_m_MIG1] THEN
    MIT_MIG1=TRUE
  ELSE
    MIT_MIG1=FALSE
  ENDIF
  IF MIT_MIG1 THEN
    MS1_LOOP()
  ENDIF  
  ;ENDFOLD ;Ende MIG 1
;
  ;FOLD MIG2
  ;Mit MIG 2
  IF $FLAG[F_m_MIG2] THEN
    MIT_MIG2=TRUE
  ELSE
    MIT_MIG2=FALSE
  ENDIF
  IF MIT_MIG2 THEN
    MS2_LOOP()
  ENDIF  
  ;ENDFOLD ;Ende MIG 2
;
  ;FOLD Bolzensteuerung 1
  ;Mit Bolzensteuerung 1
  IF $FLAG[F_m_BZ1] THEN
    MIT_Bolzen_1=TRUE
  ELSE
    MIT_Bolzen_1=FALSE
  ENDIF
;
  IF MIT_Bolzen_1 THEN
    BZ1_LOOP()
  ENDIF
  ;ENDFOLD
;
  ;FOLD Bolzensteuerung 2
  ;Mit Bolzensteuerung 2
  IF $FLAG[F_m_BZ2] THEN
    MIT_Bolzen_2=TRUE
  ELSE
    MIT_Bolzen_2=FALSE
  ENDIF
  IF MIT_Bolzen_2 THEN
    BZ2_LOOP()
  ENDIF
  ;ENDFOLD
;
  ;FOLD Bolzensteuerung mit Rotationskopf
  ;Mit Bolzensteuerung 3
  IF $FLAG[F_m_BZ3] THEN
    MIT_Bolzen_3=TRUE
  ELSE
    MIT_Bolzen_3=FALSE
  ENDIF
;
  IF MIT_Bolzen_3 THEN
    BZ3_LOOP()
  ENDIF
  ;ENDFOLD
;
  ;FOLD Mutternbuckeln 1
  ;Mit Mutternbuckeln 1 V1
  IF $FLAG[F_m_MB1] AND NOT $FLAG[F_m_MB1_N] THEN
    MIT_MB1=TRUE
  ELSE
    MIT_MB1=FALSE
  ENDIF
  IF MIT_MB1 THEN
    MB1_LOOP(1)
  ENDIF
  ;Mit Mutternbuckeln 1 V2
  IF $FLAG[F_m_MB1_N] AND NOT $FLAG[F_m_MB1] THEN
    MIT_MB1_N=TRUE
  ELSE
    MIT_MB1_N=FALSE
  ENDIF
  IF MIT_MB1_N THEN
    MB1_LOOP(2)
  ENDIF
  ;ENDFOLD
; 
  ;FOLD Mutternbuckeln 2
  ;Mit Mutternbuckeln 2 V1
  IF $FLAG[F_m_MB2] AND NOT $FLAG[F_m_MB2_N] THEN
    MIT_MB2=TRUE
  ELSE
    MIT_MB2=FALSE
  ENDIF
  IF MIT_MB2 THEN
    MB2_LOOP(1)
  ENDIF
  ;Mit Mutternbuckeln 2 V2
  IF $FLAG[F_m_MB2_N] AND NOT $FLAG[F_m_MB2] THEN
    MIT_MB2_N=TRUE
  ELSE
    MIT_MB2_N=FALSE
  ENDIF
  IF MIT_MB2_N THEN
    MB2_LOOP(2)
  ENDIF
  ;ENDFOLD
; 
  ;FOLD Schrauben
  ;Mit Schrauben
  IF $FLAG[F_m_SR] THEN
    MIT_SR=TRUE
  ELSE
    MIT_SR=FALSE
  ENDIF
  IF MIT_SR THEN
    SR_LOOP()
  ENDIF
  ;ENDFOLD  
;
  ;FOLD Wischen
  ;Mit Wischen
  IF $FLAG[F_m_RE] THEN
    MIT_RE=TRUE
  ELSE
    MIT_RE=FALSE
  ENDIF
;
  IF MIT_RE THEN
    ;~~~~~~~~~VW-Teil-Anfang~~~~~~~~
    ;Ausgabe Vorwarnung Bandende
    IF $IN[I_RE_VBE] AND $OUT[O_R_Auto] THEN
      IF (($ROB_TIMER - vz_VBE) > mVz_VBE) THEN
        $OUT[O_RE_VBE]=TRUE ; Ausgabe Vorwarnung verzoegert
      ENDIF
    ELSE
      $OUT[O_RE_VBE]=FALSE
      vz_VBE = 0
      vz_VBE = $ROB_TIMER
    ENDIF
    ;~~~~~~~~~VW-Teil-Ende~~~~~~~~
    ;Ausgabe Betriebsbereit fehlt
    $OUT[O_RE_Bereit]=$OUT[O_R_Auto] AND NOT $IN[I_RE_Bereit] AND NOT $IN[I_RE_Takt] AND NOT $OUT[O_RE_Takt]
    ;Ausgabe Bandende
    $OUT[O_RE_BE]=$OUT[O_R_Auto] AND $IN[I_RE_VBE] AND NOT $IN[I_RE_BiO] AND $FLAG[F_RE_Sammel]
    ;Ausgabe Sammelstoerung
    $OUT[O_RE_Sammel]=$OUT[O_R_Auto] AND ($FLAG[F_RE_Sammel] OR $OUT[O_RE_BE] OR $IN[I_RE_Stoer])
  ENDIF
  ;ENDFOLD
;
  ;FOLD FDS 1
  ;Mit FDS1 
  IF $FLAG[F_m_FDS1] THEN
    MIT_FDS1=TRUE
  ELSE
    MIT_FDS1=FALSE
  ENDIF
  IF MIT_FDS1 THEN
    FDS1_LOOP( )
  ENDIF
  ;ENDFOLD  
  
;  
  ;FOLD FDS 2
  ;Mit FDS2 
  IF $FLAG[F_m_FDS2] THEN
    MIT_FDS2=TRUE
  ELSE
    MIT_FDS2=FALSE
  ENDIF
;
  IF MIT_FDS2 THEN
    FDS2_LOOP( )
  ENDIF
  ;ENDFOLD  
;
  ;FOLD Spreitzmagnete
  ;Mit Spreitzmagnete 
  IF $FLAG[F_m_SpreizMa] THEN
    MIT_SpreizMa=TRUE
  ELSE
    MIT_SpreizMa=FALSE
  ENDIF
;
  IF MIT_SpreizMa THEN
    ;Vorbesetzung Analogmodul 1
    IF (SPM_AN1_IN=='B0000000000000000') THEN
      SPM_AN1_OUT='B0110000001000001'
    ELSE
      IF ((SPM_AN1_IN=='B0110000001000001') OR (SPM_AN1_IN=='B0000000100000000')) THEN
        SPM_AN1_OUT='B0000000100000000'
      ENDIF
    ENDIF
; 
    IF $OUT[O_SPM_M_Ein] AND NOT b_SPM_Hilf2 THEN 
      b_SPM_Hilf1=$OUT[O_SPM_M_Ein] AND $IN[I_SPM_MS_io]
      b_SPM_Hilf2=b_SPM_Hilf1
    ENDIF  
    IF (LIN_SUCHEN_OVRED <> -1) AND $IN[I_SPM_S_Ein] AND (b_SPM_S_Ein==FALSE) AND NOT $IN[I_SPM_ohne_P] THEN
      PULSE($OUT[O_SPM_M_Ein],TRUE,r_SPM_Z_Vorg)
      b_SPM_S_Ein=TRUE
    ENDIF
    IF (LIN_SUCHEN_OVRED == -1) THEN
      b_SPM_S_Ein=FALSE
    ENDIF 
    IF NOT $OUT[O_SPM_M_Ein] THEN
      b_SPM_Hilf2=FALSE
    ENDIF
    IF $OUT[O_R_PFO] THEN
      b_SPM_Hilf1=TRUE
    ENDIF  
;
    ;Ausgabe Fehlermeldungen
;   
    ;Fehler Alphaspanner
    ;$OUT[O_SPM_F_Alfa]=$OUT[O_R_Auto] AND $OUT[O_R_RK100]
    ;Fehler Motorschutz
    b_SPM_Hilf=NOT $IN[I_SPM_F_Mot1] OR NOT $IN[I_SPM_F_Mot2] OR NOT $IN[I_SPM_F_Mot3] OR NOT $IN[I_SPM_F_Mot4]
    $OUT[O_SPM_F_Moto]=$OUT[O_R_RK100] AND b_SPM_Hilf
    ;Fehler Magnettemperatur zu hoch
    $OUT[O_SPM_F_Ma_h]=$OUT[O_R_RK100] AND ($CYCFLAG[155]==TRUE)
    ;Fehler Magnetstrom
    $OUT[O_SPM_F_Ma_S]=$OUT[O_R_Auto] AND $OUT[O_R_RK100] AND NOT $OUT[O_SPM_M_Ein] AND NOT b_SPM_Hilf1
    ;Sammelstoerung
    b_SPM_Hilf=$OUT[O_SPM_F_Ma_h] OR $OUT[O_SPM_F_Moto] OR $OUT[O_SPM_F_Alfa]
    $OUT[O_SPM_F_Samm]=$OUT[O_R_Auto] AND $OUT[O_R_RK100] AND b_SPM_Hilf AND $timer_flag[TimerNr_Ein]     
  ENDIF
  ;ENDFOLD 
;
  ;FOLD Mit Autom. Ermittlung KF-Umdrehungen
  IF $FLAG[F_m_KF_Auto] THEN
    MIT_KF_Auto=TRUE
  ELSE
    MIT_KF_Auto=FALSE
  ENDIF
;
  ;Mit KF 2 Flanken/Umdrehung
  IF $FLAG[F_KF_2_Flanken] THEN
    MIT_KF_2Flanken=TRUE
  ELSE
    MIT_KF_2Flanken=FALSE
  ENDIF  
  ;ENDFOLD
;
  ;FOLD CleanLaser
  ;Mit CleanLaser
  IF $FLAG[F_m_CL] THEN
    MIT_CL=TRUE
  ELSE
    MIT_CL=FALSE
  ENDIF
  IF MIT_CL THEN
    CL_LOOP( )
  ENDIF
  ;ENDFOLD 
;
  ;FOLD SmartRay Version1
  ;Mit SmartRay Version 1
  IF $FLAG[F_m_SV1] THEN
    MIT_SV1=TRUE
  ELSE
    MIT_SV1=FALSE
  ENDIF
  IF MIT_SV1 AND NOT MIT_SV2 THEN
    SV1_LOOP()
  ENDIF
  ;ENDFOLD
  ;
  ;FOLD SmartRay Version2
  ;Mit SmartRay Version 2
  IF $FLAG[F_m_SV2] THEN
    MIT_SV2=TRUE
  ELSE
    MIT_SV2=FALSE
  ENDIF
  IF MIT_SV2 AND NOT MIT_SV1 THEN
    SV2_LOOP()
  ENDIF
  ;ENDFOLD 
;
  ;FOLD Suchlauf
  IF $FLAG[F_m_erw_B_Ve] THEN
    MIT_erw_B_Ve=TRUE
  ELSE
    MIT_erw_B_Ve=FALSE
  ENDIF
  IF $EXT THEN
    $FLAG[F_Suchlauf]=FALSE
  ENDIF
  ;ENDFOLD
;
  ;FOLD Mit 1 externen Zusatzachse
  IF $FLAG[F_m_1ExtAx] THEN
    MIT_1ExtAchse=TRUE
  ELSE
    MIT_1ExtAchse=FALSE
  ENDIF
  ;ENDFOLD
;
  ;FOLD Mit 2 externen Zusatzachsen
  IF $FLAG[F_m_2ExtAx] THEN
    MIT_2ExtAchse=TRUE
  ELSE
    MIT_2ExtAchse=FALSE
  ENDIF
  ;ENDFOLD
;
  ;FOLD Mit 2 externen Zusatzachsen und Roboter auf Verfahreinheit
  IF $FLAG[F_m_2ExAxA7] THEN
    MIT_2ExtAchse_A7=TRUE
  ELSE
    MIT_2ExtAchse_A7=FALSE
  ENDIF
  ;ENDFOLD
;
  ;FOLD SafeRobot
  IF $FLAG[F_m_Safe_Rob] THEN
    Mit_Safe_Rob=TRUE
  ELSE
    Mit_Safe_Rob=FALSE
  ENDIF  
  IF Mit_Safe_Rob THEN 
    SRob_LOOP()
  ENDIF  
  ;ENDFOLD  
;
  ;FOLD RSK
  ;Roboterschrittkette
;
  ;Ausgabe Fehlermeldungen
;  
  ;Fehler KS Motor/Endlage
  $OUT[O_RSK_F_KS]=$OUT[O_R_Auto] AND ($FLAG[F_RSK_KS_Ruh] OR $FLAG[F_RSK_KS_Arb])
  ;Fehler KF Motor/Initiator
  $OUT[O_RSK_F_KF]=$OUT[O_R_Auto] AND $FLAG[F_RSK_KF]
  ;Fehler Kurzschlussschweissung
  $OUT[O_RSK_F_Kurz]=$OUT[O_R_Auto] AND $FLAG[F_RSK_Kurz]
  ;Sammelstoerung
  $OUT[O_RSK_F_Sam]=$OUT[O_R_Auto] AND $OUT[O_R_PERI_RDY] AND ($FLAG[F_RSK_KF] OR $FLAG[F_RSK_KS_Ruh] OR $FLAG[F_RSK_KS_Arb] OR $FLAG[F_RSK_Kraft] OR $FLAG[F_RSK_Mess] OR $FLAG[F_RSK_Kurz] OR $FLAG[F_RSK_Vers] OR $FLAG[F_RSK_Sammel] OR $FLAG[F_KF_KS_ZS_S])
  ;ENDFOLD 
;
  ;FOLD KW1
  ;Mit Kappenwechsler 1
  IF $FLAG[F_m_KW1] THEN
    MIT_KW1=TRUE
  ELSE
    MIT_KW1=FALSE
  ENDIF
;
  IF MIT_KW1 THEN 
  ;Ausgabe Fehlermeldungen
;
    ;Kappen Magazin oben/unten leer
    $OUT[O_KW1_Mag_leer]=(NOT $IN[I_KW1_MZ1_m] AND NOT $FLAG[F_m_Stossp]) OR NOT $IN[I_KW1_MZ2_m]
    ;Fehler Kappe setzen
    $OUT[O_KW1_Feh_setz]=$IN[O_KW1_aktiv] AND $FLAG[F_SZ1_Sammel]
    ;Sammelstoerung
    $OUT[O_KW1_Sammel]=$OUT[O_R_Auto] AND $COULD_START_MOTION AND ($OUT[O_KW1_Feh_setz] OR $FLAG[F_KW1_Sammel])
  ENDIF
  ;ENDFOLD
;
  ;FOLD KW2
  ;Mit Kappenwechsler 2 (Sonderfall fuer Dockingzange EZ/SP1 Zange 2)
  IF $FLAG[F_m_KW2] THEN
    MIT_KW2=TRUE
  ELSE
    MIT_KW2=FALSE
  ENDIF
;
  IF MIT_KW2 THEN 
  ;Ausgabe Fehlermeldungen
;
    ;Kappen Magazin oben/unten leer
    $OUT[O_KW2_Mag_leer]=NOT $IN[I_KW2_MZ1_m] OR NOT $IN[I_KW2_MZ2_m]
    ;Fehler Kappe setzen
    $OUT[O_KW2_Feh_setz]=$IN[O_KW2_aktiv] AND $FLAG[F_SZ2_Sammel]
    ;Sammelstoerung
    $OUT[O_KW2_Sammel]=$OUT[O_R_Auto] AND $COULD_START_MOTION AND ($OUT[O_KW2_Feh_setz] OR $FLAG[F_KW2_Sammel])
  ENDIF
  ;ENDFOLD
;
;~~~~~~~~~VW-Teil-Anfang~~~~~~~~  
;
  ;FOLD VW_Greifer
  IF $FLAG[50] THEN
     Mit_HLF=TRUE
  ELSE
     Mit_HLF=FALSE
  ENDIF
;
  IF Mit_HLF THEN
     HLF_LOOP( )
  ENDIF
  ;ENDFOLD
;
  ;FOLD VW FEHLERANZEIGE
  VWFEH_LOOP()
  ;ENDFOLD
;
  ;FOLD VW Wasseranschaltung
  VW_WASSER()
  ;ENDFOLD
;
  ;FOLD VW_BU1
  IF $FLAG[F_VW_BU[1]] THEN
    MIT_VwBu[1]=TRUE
  ELSE
    MIT_VwBu[1]=FALSE
  ENDIF
  ;ENDFOLD (VW_BU1)
;
  ;FOLD VW_BU2
  IF $FLAG[F_VW_BU[2]] THEN
    MIT_VwBu[2]=TRUE
  ELSE
    MIT_VwBu[2]=FALSE
  ENDIF
  ;ENDFOLD (VW_BU2)
;
  ;FOLD VW-ACF
  IF $FLAG[F_m_ACF] THEN
    MIT_VwAcf=TRUE
  ELSE
    IF $OUT[O_R_PFO] AND $OUT[O_R_SAK] THEN
      MIT_VwAcf=FALSE
	ENDIF
  ENDIF
  ;ENDFOLD (VW-ACF)
;
  ;FOLD VW_BU1 & VW_ACF LOOP
  IF MIT_VwBu[1] THEN
    BU_LOOP(1)
  ENDIF
  ;ENDFOLD
;
  ;FOLD MVW_BU2 LOOP
  IF MIT_VwBu[2] THEN
    BU_LOOP(2)
  ENDIF
  ;ENDFOLD
;
  ;FOLD CGX
  ;Mit CGX
  IF $FLAG[F_m_CGX] THEN
    B_MIT_CGX=TRUE
  ELSE

    B_MIT_CGX=FALSE
  ENDIF
  ;ENDFOLD 
;
;~~~~~~~~~VW-Teil-Ende~~~~~~~~  
;
  ;FOLD Perceptron
  ;Mit Perceptron
  IF $FLAG[F_m_PRC] THEN
    B_MIT_PRC=TRUE
  ELSE
    B_MIT_PRC=FALSE
  ENDIF
  ;ENDFOLD
;
  ;FOLD INOS
  ;Mit INOS
  IF $FLAG[F_m_INO] THEN
    B_MIT_INOS=TRUE
  ELSE
    B_MIT_INOS=FALSE
  ENDIF
  IF B_MIT_INOS THEN
    INO_LOOP() 
  ENDIF
  ;ENDFOLD
;
  ;FOLD HGV
  ;Mit HGV
  IF $FLAG[F_m_HGV] THEN
    B_MIT_HGV=TRUE
  ELSE
    B_MIT_HGV=FALSE
  ENDIF
  ;ENDFOLD  
;  
  ;FOLD CGX
  ;Mit CGX
  IF $FLAG[F_m_CGX] THEN
    B_MIT_CGX=TRUE
  ELSE
    B_MIT_CGX=FALSE
  ENDIF
  ;ENDFOLD 
;
;~~~~~~~~~VW-Teil-Anfang~~~~~~~~
  ;FOLD GOM
  IF $FLAG[F_MIT_GOM] THEN
    B_MIT_GOM=TRUE
    gom_INT_LOOP()
   ELSE
    B_MIT_GOM=FALSE
  ENDIF
  ;ENDFOLD (GOM)
;~~~~~~~~~VW-Teil-Ende~~~~~~~~
;
  ;FOLD Audi_EKI
  ;Mit EKI 
  IF $FLAG[F_m_EKI] THEN
    MIT_EKI=TRUE
  ELSE
    MIT_EKI=FALSE
  ENDIF
  IF MIT_EKI THEN
    A_EKI_LOOP() 
  ENDIF
  ;ENDFOLD
;  
;ENDFOLD Ende von "Vorwahl von Prozessgeraete und Statusmeldungen an BMS"
;
;FOLD Grundstellung pruefen
IF NOT $IN_HOME AND $RC_RDY1 AND $COULD_START_MOTION THEN
  $OUT[O_R_PFO]=FALSE
ENDIF
;ENDFOLD
;
;FOLD Arbeitspunktzaehler ruecksetzen
IF ($OUT[O_R_PFO] OR ($OUT[O_R_Loop_akt] AND $IN_HOME)) THEN
  $COUNT_I[I_Arbpkt_Nr]=0
ENDIF  
;ENDFOLD
;
;FOLD Roboter hat Not-Aus
IF $OUT[O_R_N_intern] THEN
  $OUT[O_R_Notaus]=FALSE
ELSE
  $OUT[O_R_Notaus]=TRUE  
ENDIF
;ENDFOLD
;
;FOLD Interbus Master i.O.
$OUT[O_R_Mast_io]=$IN[I_R_Mast_io]
;ENDFOLD
;
;FOLD Interbus Quality-/Warnmeldung
$OUT[O_R_FeldbusQ]=$IN[I_R_FeldbusQ] OR $IN[I_R_FeldbusW]
;ENDFOLD
;
;FOLD Automatisches Ankoppeln von Feldbus-Alternativen
IF $FLAG[F_m_Alternat] THEN
  IBS_T=TRUE
ELSE
  IBS_T=FALSE
ENDIF
;ENDFOLD
;
;FOLD Programmoverride pruefen
IF ($OV_PRO == 100) THEN
  $FLAG[F_OV_100]=TRUE
  $OUT[O_R_n_OV]=FALSE
ELSE
  IF (LIN_SUCHEN_OVRED == -1) THEN
    $FLAG[F_OV_100]=FALSE
    IF $OUT[O_R_PFO] THEN
      $OUT[O_R_n_OV]=TRUE
    ENDIF
  ENDIF
ENDIF
;ENDFOLD
;
;FOLD Schutzgitterfreigabe
IF NOT $OUT[O_R_WSLAV] AND NOT $OUT[O_R_WPROZ] THEN
  My_SG_Timer=$ROB_TIMER
ENDIF
Hilf_Verr1=($OUT[O_R_Anf_V1] OR $OUT[O_R_Anf_V2] OR $OUT[O_R_Anf_V3] OR $OUT[O_R_Anf_V4] OR $OUT[O_R_Anf_V5] OR $OUT[O_R_Anf_V6] OR $OUT[O_R_Anf_V7] OR $OUT[O_R_Anf_V8])
Hilf_Verr2=($OUT[O_R_Anf_V9] OR $OUT[O_R_Anf_V10] OR $OUT[O_R_Anf_V11] OR $OUT[O_R_Anf_V12] OR $OUT[O_R_Anf_V13] OR $OUT[O_R_Anf_V14] OR $OUT[O_R_Anf_V15] OR $OUT[O_R_Anf_V16])
Hilf_Verr=(Hilf_Verr1 OR Hilf_Verr2)
b_SG_Hilf=($OUT[O_KL1_SP_EIN] OR $OUT[O_KL2_SP_EIN] OR $OUT[O_KL3_SP_EIN])
IF (($OUT[O_R_WSLAV] OR $OUT[O_R_WPROZ]) AND ($FLAG[F_RSK_Gst] OR $OUT[O_RSK_F_Sam]) AND NOT b_SG_Hilf AND (NOT Hilf_Verr OR (($ROB_TIMER-My_SG_Timer)>3000))) THEN
  $OUT[O_R_SG_gesp]=FALSE
ELSE
  $OUT[O_R_SG_gesp]=TRUE
ENDIF  
;ENDFOLD
;
;FOLD Stellglieder Start vorhanden
$OUT[4060] = $COULD_START_MOTION
;ENDFOLD
;
;FOLD Roboter ist in Bewegung
b_Rob_move_h=FALSE
FOR i=1 TO 7
  IF ($vel_axis_act[i]>1) THEN 
    b_Rob_move_h=TRUE
  ENDIF  
ENDFOR  
b_Rob_move=b_Rob_move_h  
$OUT[O_R_i_Bew] = b_Rob_move OR $OUT[O_R_bewegt]
;ENDFOLD
;
;FOLD Fehlende Roboter-Verriegelung melden
Hilf_Verr1=($OUT[O_R_Anf_V1] OR $OUT[O_R_Anf_V2] OR $OUT[O_R_Anf_V3] OR $OUT[O_R_Anf_V4] OR $OUT[O_R_Anf_V5] OR $OUT[O_R_Anf_V6] OR $OUT[O_R_Anf_V7] OR $OUT[O_R_Anf_V8])
Hilf_Verr2=($OUT[O_R_Anf_V9] OR $OUT[O_R_Anf_V10] OR $OUT[O_R_Anf_V11] OR $OUT[O_R_Anf_V12] OR $OUT[O_R_Anf_V13] OR $OUT[O_R_Anf_V14] OR $OUT[O_R_Anf_V15] OR $OUT[O_R_Anf_V16])
Hilf_Verr=(Hilf_Verr1 OR Hilf_Verr2)
IF NOT $OUT[O_R_w_FB] AND $OUT[O_R_Auto] AND $OUT[O_R_WSLAV] AND $OUT[O_R_Proz_akt] AND $OUT[O_R_steht] AND Hilf_Verr  THEN
  $OUT[O_R_w_RV]=TRUE
  $FLAG[F_Verr_BMS]=TRUE
ELSE
  $OUT[O_R_w_RV]=FALSE
ENDIF
;ENDFOLD
;
;FOLD Fehlende SPS-Bedingung melden
Hilf_P_akti1=($OUT[O_R_P1_akt] OR $OUT[O_R_P2_akt] OR $OUT[O_R_P3_akt] OR $OUT[O_R_P4_akt] OR $OUT[O_R_P5_akt])
Hilf_P_akti2=($OUT[O_R_P6_akt] OR $OUT[O_R_P7_akt] OR $OUT[O_R_P8_akt] OR $OUT[O_R_P9_akt] OR $OUT[O_R_P10_akt] OR $OUT[O_R_P11_akt])
IF NOT Hilf_P_akti1 AND NOT Hilf_P_akti2 THEN
  IF NOT $OUT[O_R_w_FB] AND $OUT[O_R_Auto] AND NOT $OUT[O_R_w_RV] AND NOT $OUT[O_R_PFO] AND NOT $OUT[O_R_Wart] AND $IN[I_R_k_ZutrA] AND $OUT[O_R_WSLAV] AND $OUT[O_R_Proz_akt] AND $OUT[O_R_steht] THEN
    $OUT[O_R_w_SPS]=TRUE
  ELSE
    $OUT[O_R_w_SPS]=FALSE
  ENDIF
ELSE
  $OUT[O_R_w_SPS]=FALSE
ENDIF
;ENDFOLD
;
;FOLD Ruecksetzen Slavemeldungsausgabe
IF NOT $OUT[O_R_w_RV] THEN
  $FLAG[F_Verr_BMS]=FALSE
ENDIF
;ENDFOLD
;
;FOLD Roboter wartet auf Fahrbedingung
Hilf_P_akti1=($OUT[O_R_P1_akt] OR $OUT[O_R_P2_akt] OR $OUT[O_R_P3_akt] OR $OUT[O_R_P4_akt] OR $OUT[O_R_P5_akt])
Hilf_P_akti2=($OUT[O_R_P6_akt] OR $OUT[O_R_P7_akt] OR $OUT[O_R_P8_akt] OR $OUT[O_R_P9_akt] OR $OUT[O_R_P10_akt] OR $OUT[O_R_P11_akt])
IF $OUT[O_R_Auto] AND NOT $OUT[O_R_WPROZ] THEN
  $timer[TimerNr_FB]=-20000 
  $timer_stop[TimerNr_FB]=TRUE
ELSE  
  IF $OUT[O_R_Auto] AND $OUT[O_R_WPROZ] THEN
    $timer_stop[TimerNr_FB]=FALSE
  ENDIF  
ENDIF
b_RwFB_Hilf1=NOT $OUT[O_R_PFO] AND $OUT[O_R_Proz_akt] AND $OUT[O_R_steht] AND NOT $OUT[O_R_Wart] AND $IN[I_R_Masch_S] AND $IN[I_R_k_ZutrA]
IF $FLAG[F_FB_PSPS] AND ((NOT Hilf_P_akti1 AND NOT Hilf_P_akti2) OR $TIMER_FLAG[TimerNr_FB]) THEN
  IF $OUT[O_R_Auto] AND NOT $FLAG[F_Verr_BMS] AND b_RwFB_Hilf1 AND $OUT[O_R_WPROZ] AND (NOT $OUT[O_R_WSLAV] OR $TIMER_FLAG[TimerNr_FB]) THEN    
    $OUT[O_R_w_FB] = TRUE
  ENDIF
ELSE
  IF $OUT[O_R_Auto] AND NOT $OUT[O_R_PFO] AND $OUT[O_R_Proz_akt] AND $OUT[O_R_steht] AND NOT $FLAG[F_Verr_BMS] AND b_RwFB_Hilf1 AND NOT $FLAG[F_FB_PSPS] THEN    
    $OUT[O_R_w_FB] = TRUE
  ENDIF      
ENDIF               
IF $OUT[O_R_i_Bew] OR (NOT $OUT[O_R_WPROZ] AND $FLAG[F_FB_PSPS]) THEN
  $OUT[O_R_w_FB] = FALSE
ENDIF
;ENDFOLD
;
;FOLD Anhalten in der P-SPS
IF ($PRO_MODE1==#MSTEP) THEN
  $FLAG[F_Halt_PSPS]=TRUE
ELSE
  $FLAG[F_Halt_PSPS]=FALSE
ENDIF
;ENDFOLD
;
;FOLD Anwenderflag ruecksetzen
IF $OUT[O_R_PFO] AND $OUT[O_R_steht] AND (($mode_op==#T1) OR ($mode_op==#T2)) THEN
  FOR I=930 TO 959
    $FLAG[I]=FALSE
  ENDFOR
  $FLAG[F_Medien_AUS]=FALSE
ENDIF
;ENDFOLD
;
;FOLD Datensicherung durch SPS
IF ($IN[I_DS_Anf_SPS] AND NOT B_DS_Hilf) THEN
  $APP_INT[6]=1
  B_DS_aktiv=TRUE
ENDIF
B_DS_Hilf = $IN[I_DS_Anf_SPS]
IF NOT $IN[I_DS_Anf_SPS] AND $OUT[O_DS_FM_SPS] THEN
  $OUT[O_DS_FM_SPS]=false
ENDIF
IF ((B_DS_aktiv==TRUE) AND ($APP_INT[6]==0)) THEN
  IF (ARCHIVE_RES==0) THEN
    ;alles i.o.
	 $OUT[O_DS_FM_SPS]=TRUE
	 B_DS_aktiv=false
  ENDIF
  IF (ARCHIVE_RES<0) THEN
    ;Fehlerzustand
	 Basic_S_Msg(2,#NotifyMsg, ARCHIVE_RES)
	 B_DS_aktiv=false
  ENDIF
ENDIF
;ENDFOLD
;
;FOLD Peripherie Gateway
IF PERI_GATEW1 THEN
  GATEW1_OUT=Share_Dev1
  IF $IN[3792] AND NOT $OUT[560] THEN
    $OUT[545]=$IN[3777]
    $OUT[546]=$IN[3778]
    $OUT[547]=$IN[3779]
    $OUT[548]=$IN[3780]
    $OUT[549]=$IN[3781]
    $OUT[550]=$IN[3782]
    $OUT[551]=$IN[3783]
    $OUT[552]=$IN[3784]
    $OUT[553]=$IN[3785]
    $OUT[554]=$IN[3786]
    $OUT[555]=$IN[3787]
    $OUT[556]=$IN[3788]
    $OUT[557]=$IN[3789]
    $OUT[558]=$IN[3790]
    $OUT[559]=$IN[3791]
  ENDIF
ENDIF
;ENDFOLD
;
;FOLD Vorsteuerluft Ventile
IF $OUT[O_R_Hand] AND $COULD_START_MOTION AND NOT $OUT[O_R_Proz_akt] THEN
  FOR i = 1 TO 29
    IF ((DEF_ZANGE[i].Typ==1) OR (DEF_ZANGE[i].Typ==2)) AND (DEF_ZANGE[i].A_AUF>0) AND (DEF_ZANGE[i].A_ZU>0) THEN
	   IF (($OUT[DEF_ZANGE[i].A_AUF]==TRUE) OR ($OUT[DEF_ZANGE[i].A_ZU]==TRUE)) THEN
        ;Greifer Vorsteuerluft
	     $OUT[O_V1_G1]=TRUE
        $OUT[O_V2_G1]=TRUE
        $OUT[O_V3_G1]=TRUE
	     ;Abdeckklappen Docking Bahnhoefe Vorsteuerluft
        $OUT[O_V_DB1_2]=TRUE
        $OUT[O_V_DB3_4]=TRUE
        $OUT[O_V_DB5_6]=TRUE
        $OUT[O_V_DB7_8]=TRUE
        ;Klebe Spueleimer 1
        IF ((DEF_ZANGE[28].Typ==1) OR (DEF_ZANGE[28].Typ==2)) AND (DEF_ZANGE[28].A_AUF>0) AND (DEF_ZANGE[28].A_ZU>0) THEN
          IF MIT_Kleben_1 THEN
            KL_Sp1_LOOP( )
          ENDIF  
        ENDIF            
        ;Klebe Spueleimer 2
        IF ((DEF_ZANGE[27].Typ==1) OR (DEF_ZANGE[27].Typ==2)) AND (DEF_ZANGE[27].A_AUF>0) AND (DEF_ZANGE[27].A_ZU>0) THEN
          IF MIT_Kleben_2 THEN
            KL_Sp2_LOOP( )
          ENDIF 
        ENDIF            
        ;Klebe Spueleimer 3
        IF ((DEF_ZANGE[26].Typ==1) OR (DEF_ZANGE[26].Typ==2)) AND (DEF_ZANGE[26].A_AUF>0) AND (DEF_ZANGE[26].A_ZU>0) THEN
          IF MIT_Kleben_3 THEN
            KL_Sp3_LOOP( )
          ENDIF 
        ENDIF   
        $OUT[O_V_KL_Res1]=TRUE
        $OUT[O_V_KL_Res2]=TRUE
;
        ;MS1 Pneum. Schwenkeinheit
        IF ((DEF_ZANGE[26].Typ==1) OR (DEF_ZANGE[26].Typ==2)) AND (DEF_ZANGE[26].A_AUF>0) AND (DEF_ZANGE[26].A_ZU>0) THEN
          IF ($OUT[DEF_ZANGE[26].A_AUF]==TRUE) AND $IN[I_VS_Ruh_MS1] THEN
            IF $IN[I_BR_Ruh_MS1] THEN
              $OUT[O_FRGHal_MS1]=TRUE
              $OUT[O_V_P_S_MS1]=TRUE
              $OUT[O_FRGBew_MS1]=FALSE
            ELSE  
              $OUT[O_FRGHal_MS1]=FALSE
              $OUT[O_V_P_S_MS1]=TRUE
              $OUT[O_FRGBew_MS1]=TRUE
            ENDIF  
          ENDIF 
          IF ($OUT[DEF_ZANGE[26].A_ZU]==TRUE) AND $IN[I_VS_Ruh_MS1] THEN
            IF $IN[I_BR_Arb_MS1] THEN
              $OUT[O_FRGHal_MS1]=TRUE
              $OUT[O_V_P_S_MS1]=TRUE
              $OUT[O_FRGBew_MS1]=FALSE
            ELSE  
              $OUT[O_FRGHal_MS1]=FALSE
              $OUT[O_V_P_S_MS1]=TRUE
              $OUT[O_FRGBew_MS1]=TRUE
            ENDIF  
          ENDIF 
        ENDIF            
        ;MS1 Pneum. Versetzeinheit
        IF ((DEF_ZANGE[27].Typ==1) OR (DEF_ZANGE[27].Typ==2)) AND (DEF_ZANGE[27].A_AUF>0) AND (DEF_ZANGE[27].A_ZU>0) THEN
          IF (($OUT[DEF_ZANGE[27].A_AUF]==TRUE) OR ($OUT[DEF_ZANGE[27].A_ZU]==TRUE)) AND ($IN[I_BR_Ruh_MS1] OR $IN[I_BR_Arb_MS1]) THEN
            $OUT[O_V_P_S_MS1]=TRUE
          ENDIF    
        ENDIF            
;
        ;Flat-Clinchen
        IF ((DEF_ZANGE[20].Typ==1) OR (DEF_ZANGE[20].Typ==2)) AND (DEF_ZANGE[20].A_AUF>0) AND (DEF_ZANGE[20].A_ZU>0) THEN   
          $OUT[O_V_CZF_Bew]=TRUE
        ENDIF           
;          
        ;Ventilinsel mit abschaltbarer Vorsteuerluft
        $OUT[O_V_PR]=TRUE
        $OUT[O_V_P_S_MS2]=TRUE
        $OUT[O_FRGBew_MS2]=TRUE
        $OUT[O_V_MB1]=TRUE
        $OUT[O_V_MB2]=TRUE
      ENDIF
	 ENDIF  
  ENDFOR    	 
ENDIF
IF $OUT[O_R_Hand] AND $FLAG[F_RSK_Gst] AND NOT $COULD_START_MOTION THEN  
  ;Greifer Vorsteuerluft
  $OUT[O_V1_G1]=FALSE
  $OUT[O_V2_G1]=FALSE
  $OUT[O_V3_G1]=FALSE
  ;Abdeckklappen Docking Bahnhoefe Vorsteuerluft
  $OUT[O_V_DB1_2]=FALSE
  $OUT[O_V_DB3_4]=FALSE
  $OUT[O_V_DB5_6]=FALSE
  $OUT[O_V_DB7_8]=FALSE
  ;Klebe Spueleimer
  KL_SpRe_LOOP( )
  $OUT[O_V_KL_Res1]=FALSE
  $OUT[O_V_KL_Res2]=FALSE 
  ;MS1 Pneum. Schwenkeinheit
  $OUT[O_FRGHal_MS1]=FALSE
  $OUT[O_V_P_S_MS1]=FALSE
  $OUT[O_FRGBew_MS1]=FALSE
  ;MS1 Pneum. Versetzeinheit
  $OUT[O_V_P_S_MS1]=FALSE
  $OUT[O_FRGBew_MS1]=FALSE
  ;Ventilinsel mit abschaltbarer Vorsteuerluft
  $OUT[O_V_PR]=FALSE
  $OUT[O_V_P_S_MS2]=FALSE
  $OUT[O_FRGBew_MS2]=FALSE
  $OUT[O_V_MB1]=FALSE
  $OUT[O_V_MB2]=FALSE
  ;Flat-Clinchen
  $OUT[O_V_CZF]=FALSE   
  $OUT[O_V_CZF_Bew]=FALSE 
ENDIF	
IF $OUT[O_R_Auto] AND NOT $COULD_START_MOTION AND NOT $OUT[O_G_aktiv] THEN  
  ;Greifer Vorsteuerluft
  $OUT[O_V1_G1]=FALSE
  $OUT[O_V2_G1]=FALSE
  $OUT[O_V3_G1]=FALSE
ENDIF	
;ENDFOLD 
;
;FOLD Kuehlwasser in Single-Step vorhanden ruecksetzen
IF ($OUT[O_R_Auto] OR ($OUT[O_R_Hand] AND NOT $COULD_START_MOTION)) THEN
  $FLAG[F_SZ1_KW_vor] = FALSE
  $FLAG[F_SZ2_KW_vor] = FALSE
  $FLAG[F_SZ3_KW_vor] = FALSE
ENDIF
;ENDFOLD
;
;FOLD Kappenfraesen  
  ;FOLD Kappenfraesen SZ 1
  ;KF1-Nennstrom
  IF Mit_Braeu_KF THEN
    $OUT[O_KF1_N_PB0]=FALSE
    $OUT[O_KF1_N_PB2]=TRUE
    $OUT[O_KF1_N_PB3]=TRUE
    $OUT[O_KF1_N_PB4]=TRUE
    $OUT[O_KF1_N_PB5]=FALSE
  ELSE
    $OUT[O_KF1_N_PB0]=TRUE
    $OUT[O_KF1_N_PB2]=FALSE
    $OUT[O_KF1_N_PB3]=FALSE
    $OUT[O_KF1_N_PB4]=FALSE
    $OUT[O_KF1_N_PB5]=TRUE
  ENDIF
  ;Einschwenkvorr. KF1-Nennstrom
  $OUT[O_KS1_N_PB0]=TRUE
  $OUT[O_KS1_N_PB1]=TRUE
  $OUT[O_KS1_N_PB4]=TRUE
  ;ENDFOLD
;
  ;FOLD Kappenfraesen SZ 2
  ;KF2-Nennstrom
  IF ($softplcint[2]>0) THEN
    IF Mit_Braeu_KF THEN
      $OUT[O_KF2_N_PB0]=FALSE
      $OUT[O_KF2_N_PB2]=TRUE
      $OUT[O_KF2_N_PB3]=TRUE
      $OUT[O_KF2_N_PB4]=TRUE
      $OUT[O_KF2_N_PB5]=FALSE
    ELSE
      $OUT[O_KF2_N_PB0]=TRUE
      $OUT[O_KF2_N_PB2]=FALSE
      $OUT[O_KF2_N_PB3]=FALSE
      $OUT[O_KF2_N_PB4]=FALSE
      $OUT[O_KF2_N_PB5]=TRUE
    ENDIF  
  ENDIF
  ;Einschwenkvorr. KF2-Nennstrom
  $OUT[O_KS2_N_PB0]=TRUE
  $OUT[O_KS2_N_PB1]=TRUE
  $OUT[O_KS2_N_PB4]=TRUE
  ;ENDFOLD
;
  ;FOLD Kappenfraesen SZ 3
  ;KF3-Nennstrom
  IF ($softplcint[3]>0) THEN
    IF Mit_Braeu_KF THEN
      $OUT[O_KF3_N_PB0]=FALSE
      $OUT[O_KF3_N_PB2]=TRUE
      $OUT[O_KF3_N_PB3]=TRUE
      $OUT[O_KF3_N_PB4]=TRUE
      $OUT[O_KF3_N_PB5]=FALSE
    ELSE
      $OUT[O_KF3_N_PB0]=TRUE
      $OUT[O_KF3_N_PB2]=FALSE
      $OUT[O_KF3_N_PB3]=FALSE
      $OUT[O_KF3_N_PB4]=FALSE
      $OUT[O_KF3_N_PB5]=TRUE
    ENDIF
    ;Einschwenkvorr. KF3-Nennstrom
    $OUT[O_KS3_N_PB0]=TRUE
    $OUT[O_KS3_N_PB1]=TRUE
    $OUT[O_KS3_N_PB4]=TRUE
  ENDIF  
  ;ENDFOLD
;
  ;FOLD KF Ausblasen Zeitverzoegert ausschalten
  ;KF1 robotergefuehrt
  IF $FLAG[F_KF_Bla_rob] THEN
    IF (KFRem==FALSE) THEN
      TimerNr_KF=$ROB_TIMER
      KFRem=TRUE
    ENDIF
    IF (PROCPAR[80]<=0) THEN
      PROCPAR[80]=10
    ENDIF
    IF ($ROB_TIMER - TimerNr_KF) > (PROCPAR[80]*100) THEN
      $OUT[O_KF_Bla_rob]=FALSE
      $OUT[O_KF_Bla_rob_KW]=FALSE
      $FLAG[F_KF_Bla_rob]=FALSE
      KFRem=FALSE
    ENDIF
  ENDIF
;  
  ;KF1 stationaer
  IF $FLAG[F_KF_Bla_st1] THEN
    IF (KFRem==FALSE) THEN
      TimerNr_KF=$ROB_TIMER
      KFRem=TRUE
    ENDIF
    IF (PROCPAR[81]<=0) THEN
      PROCPAR[81]=10
    ENDIF
    IF ($ROB_TIMER - TimerNr_KF) > (PROCPAR[81]*100) THEN
      $OUT[O_KF_Bla_st1]=FALSE
      $FLAG[F_KF_Bla_st1]=FALSE
      KFRem=FALSE
    ENDIF
  ENDIF
;  
  ;KF2 stationaer
  IF $FLAG[F_KF_Bla_st2] THEN
    IF (KFRem==FALSE) THEN
      TimerNr_KF=$ROB_TIMER
      KFRem=TRUE
    ENDIF
    IF (PROCPAR[82]<=0) THEN
      PROCPAR[82]=10
    ENDIF
    IF ($ROB_TIMER - TimerNr_KF) > (PROCPAR[82]*100) THEN
      $OUT[O_KF_Bla_st2]=FALSE
      $FLAG[F_KF_Bla_st2]=FALSE
      KFRem=FALSE
    ENDIF
  ENDIF
;  
  ;KF3 stationaer
  IF $FLAG[F_KF_Bla_st3] THEN
    IF (KFRem==FALSE) THEN
      TimerNr_KF=$ROB_TIMER
      KFRem=TRUE
    ENDIF
    IF (PROCPAR[83]<=0) THEN
      PROCPAR[83]=10
    ENDIF
    IF ($ROB_TIMER - TimerNr_KF) > (PROCPAR[83]*100) THEN
      $OUT[O_KF_Bla_st3]=FALSE
      $FLAG[F_KF_Bla_st3]=FALSE
      KFRem=FALSE
    ENDIF
  ENDIF
  ;ENDFOLD
;
  ;FOLD KF Mutterbuckeln 1
  ;MB1-Nennstrom
  IF MIT_MB1 AND NOT SZ_3_E3 AND NOT SZ_3_E4 THEN
    $OUT[O_KFB1_N_PB0]=FALSE
    $OUT[O_KFB1_N_PB2]=TRUE
    $OUT[O_KFB1_N_PB3]=TRUE
    $OUT[O_KFB1_N_PB4]=TRUE
    $OUT[O_KFB1_N_PB5]=FALSE
    ;Einschwenkvorr. MB1-Nennstrom
    $OUT[O_KSB1_N_PB1]=FALSE
    $OUT[O_KSB1_N_PB2]=TRUE
    $OUT[O_KSB1_N_PB3]=TRUE
  ENDIF  
  ;ENDFOLD
;
  ;FOLD KF Mutterbuckeln 2
  ;MB2-Nennstrom
  IF MIT_MB2 AND NOT SZ_2_E2 AND NOT SZ_2_E3 THEN
    $OUT[O_KFB2_N_PB0]=FALSE
    $OUT[O_KFB2_N_PB2]=TRUE
    $OUT[O_KFB2_N_PB3]=TRUE
    $OUT[O_KFB2_N_PB4]=TRUE
    $OUT[O_KFB2_N_PB5]=FALSE
    ;Einschwenkvorr. MB2-Nennstrom
    $OUT[O_KSB2_N_PB1]=FALSE
    $OUT[O_KSB2_N_PB2]=TRUE
    $OUT[O_KSB2_N_PB3]=TRUE
  ENDIF  
  ;ENDFOLD  
;
  ;Autom. Ermittlung KF-Umdrehungen
  ;Limit vorbesetzen
  IF MIT_KF_2Flanken AND ((KF_Umd_Limit<14) OR (KF_Umd_Limit>24)) THEN
    KF_Umd_Limit=16
  ENDIF
  IF NOT MIT_KF_2Flanken AND ((KF_Umd_Limit<7) OR (KF_Umd_Limit>12)) THEN
    KF_Umd_Limit=10
  ENDIF
;
  IF MIT_KF_Auto THEN
    ; Zaehler vorbesetzen EZ1/SZ1
    IF ($COUNT_I[2]<4) OR ($COUNT_I[2]>KF_Umd_Limit) OR  ($COUNT_I[3]<4) OR ($COUNT_I[3]>KF_Umd_Limit) THEN
      IF MIT_KF_2Flanken THEN
        $COUNT_I[2]=8
        $COUNT_I[3]=8
      ELSE
        $COUNT_I[2]=4
        $COUNT_I[3]=4
      ENDIF
    ENDIF
    IF ($COUNT_I[4]<4) OR ($COUNT_I[4]>(KF_Umd_Limit+1)) THEN
      IF MIT_KF_2Flanken THEN
        $COUNT_I[4]=8
      ELSE
        $COUNT_I[4]=4
      ENDIF
    ENDIF
    ; Zaehler Vorbesetzen EZ2/SZ1
    IF ($COUNT_I[5]<4) OR ($COUNT_I[5]>KF_Umd_Limit) OR  ($COUNT_I[6]<4) OR ($COUNT_I[6]>KF_Umd_Limit) THEN
      IF MIT_KF_2Flanken THEN
        $COUNT_I[5]=8
        $COUNT_I[6]=8
      ELSE
        $COUNT_I[5]=4
        $COUNT_I[6]=4
      ENDIF
    ENDIF
    IF ($COUNT_I[7]<4) OR ($COUNT_I[7]>(KF_Umd_Limit+1)) THEN
      IF MIT_KF_2Flanken THEN
        $COUNT_I[7]=8
      ELSE
        $COUNT_I[7]=4
      ENDIF
    ENDIF
    ; Zaehler Vorbesetzen EZ1/SZ2
    IF ($COUNT_I[8]<4) OR ($COUNT_I[8]>KF_Umd_Limit) OR  ($COUNT_I[9]<4) OR ($COUNT_I[9]>KF_Umd_Limit) THEN
      IF MIT_KF_2Flanken THEN
        $COUNT_I[8]=8
        $COUNT_I[9]=8
      ELSE
        $COUNT_I[8]=4
        $COUNT_I[9]=4
      ENDIF
    ENDIF
    IF ($COUNT_I[10]<4) OR ($COUNT_I[10]>(KF_Umd_Limit+1)) THEN
      IF MIT_KF_2Flanken THEN
        $COUNT_I[10]=8
      ELSE
        $COUNT_I[10]=4
      ENDIF
    ENDIF
    ; Zaehler Vorbesetzen EZ1/SZ3
    IF ($COUNT_I[11]<4) OR ($COUNT_I[11]>KF_Umd_Limit) OR ($COUNT_I[12]<4) OR ($COUNT_I[12]>KF_Umd_Limit) THEN
      IF MIT_KF_2Flanken THEN
        $COUNT_I[11]=8
        $COUNT_I[12]=8
      ELSE
        $COUNT_I[11]=4
        $COUNT_I[12]=4
      ENDIF
    ENDIF
    IF ($COUNT_I[13]<4) OR ($COUNT_I[13]>(KF_Umd_Limit+1)) THEN
      IF MIT_KF_2Flanken THEN
        $COUNT_I[13]=8
      ELSE
        $COUNT_I[13]=4
      ENDIF
    ENDIF
    ; Zaehler Vorbesetzen EZ1/SZ4
    IF ($COUNT_I[14]<4) OR ($COUNT_I[14]>KF_Umd_Limit) OR ($COUNT_I[15]<4) OR ($COUNT_I[15]>KF_Umd_Limit) THEN
      IF MIT_KF_2Flanken THEN
        $COUNT_I[14]=8
        $COUNT_I[15]=8
      ELSE
        $COUNT_I[14]=4
        $COUNT_I[15]=4
      ENDIF
    ENDIF
    IF ($COUNT_I[16]<4) OR ($COUNT_I[16]>(KF_Umd_Limit+1)) THEN
      IF MIT_KF_2Flanken THEN
        $COUNT_I[16]=8
      ELSE
        $COUNT_I[16]=4
      ENDIF
    ENDIF
    ; Zaehler Vorbesetzen EZ3/SZ1
    IF ($COUNT_I[17]<4) OR ($COUNT_I[17]>KF_Umd_Limit) OR  ($COUNT_I[18]<4) OR ($COUNT_I[18]>KF_Umd_Limit) THEN
      IF MIT_KF_2Flanken THEN
        $COUNT_I[17]=8
        $COUNT_I[18]=8
      ELSE
        $COUNT_I[17]=4
        $COUNT_I[18]=4
      ENDIF
    ENDIF
    IF ($COUNT_I[19]<4) OR ($COUNT_I[19]>(KF_Umd_Limit+1)) THEN
      IF MIT_KF_2Flanken THEN
        $COUNT_I[19]=8
      ELSE
        $COUNT_I[19]=4
      ENDIF
    ENDIF
  ENDIF
;
  ;Hilfsflag Flankenauswertung KF1
  IF NOT $OUT[O_KF1_M1] THEN
    KF1_EIN=FALSE
  ENDIF
;
  ;Hilfsflag Flankenauswertung KF2
  IF NOT $OUT[O_KF2_M1] THEN
    KF2_EIN=FALSE
  ENDIF
;
  ;Hilfsflag Flankenauswertung KF3
  IF NOT $OUT[O_KF3_M1] THEN
    KF3_EIN=FALSE
  ENDIF
;
  ;Zaehlung der Fraesungen bei SST 1
  ;EZ1 SZ1
  IF $OUT[O_KF1_M1] AND $FLAG[F_SZ1_Anw_NF] AND NOT $FLAG[F_SZ1_Anw_SF] AND NOT KF1_EIN AND ($B_OUT[3]==31) THEN
    KF1_EIN=TRUE
    KF1_Z1_aktiv=TRUE
  ENDIF
;
  ;EZ1 SZ2
  IF $OUT[O_KF1_M1] AND $FLAG[F_SZ1_Anw_NF] AND NOT $FLAG[F_SZ1_Anw_SF] AND NOT KF1_EIN AND ($B_OUT[3]==32) THEN
    KF1_EIN=TRUE
    KF1_Z2_aktiv=TRUE
  ENDIF
;
  ;EZ1 SZ3
  IF $OUT[O_KF1_M1] AND $FLAG[F_SZ1_Anw_NF] AND NOT $FLAG[F_SZ1_Anw_SF] AND NOT KF1_EIN AND ($B_OUT[3]==33) THEN
    KF1_EIN=TRUE
    KF1_Z3_aktiv=TRUE
  ENDIF
;
  ;EZ1 SZ4
  IF $OUT[O_KF1_M1] AND $FLAG[F_SZ1_Anw_NF] AND NOT $FLAG[F_SZ1_Anw_SF] AND NOT KF1_EIN AND ($B_OUT[3]==34) THEN
    KF1_EIN=TRUE
    KF1_Z4_aktiv=TRUE
  ENDIF
;
  ;EZ2 SZ1 an SST2
  IF NOT $FLAG[F_2SZ_an_SK1] AND $OUT[O_KF2_M1] AND $FLAG[F_SZ2_Anw_NF] AND NOT $FLAG[F_SZ2_Anw_SF] AND NOT KF2_EIN AND ($B_OUT[6]==31) THEN
    KF2_EIN=TRUE
    KF2_Z1_aktiv=TRUE
  ENDIF
;
  ;EZ2 SZ1 an SST1
  IF $FLAG[F_2SZ_an_SK1] AND $OUT[O_KF2_M1] AND $FLAG[F_SZ2_Anw_NF] AND NOT $FLAG[F_SZ2_Anw_SF] AND NOT KF2_EIN AND ($B_OUT[3]==35) THEN
    KF2_EIN=TRUE
    KF2_Z1_aktiv=TRUE
  ENDIF
;
  ;EZ3 SZ1 an SST2
  IF $OUT[O_KF3_M1] AND $FLAG[F_SZ3_Anw_NF] AND NOT $FLAG[F_SZ3_Anw_SF] AND NOT KF3_EIN AND ($B_OUT[9]==31) THEN
    KF3_EIN=TRUE
    KF3_Z1_aktiv=TRUE
  ENDIF
  ;ENDFOLD
;ENDFOLD (Kapenfraesen)  
;
;FOLD KS 1 + 2 + 3 schwenken
IF $OUT[O_R_Hand] AND NOT $OUT[O_R_Proz_akt] THEN
;KS 1
  IF $OUT[O_KS1_Schw] AND $IN[I_R_SK_gesch] THEN
    $OUT[O_KS1_KYP3V] = TRUE
    $OUT[O_KS1_M1] = ($IN[I_KS1_BE_3V] OR NOT $FLAG[Ausgl_an_KF])
  ELSE
    $OUT[O_KS1_Schw] = FALSE
  ENDIF
;KS 2
  IF $OUT[O_KS2_Schw] AND $IN[I_R_SK_gesch]  THEN
    $OUT[O_KS2_KYP3V] = TRUE
    $OUT[O_KS2_M1] = $IN[I_KS2_BE_3V] OR NOT $FLAG[Ausgl_an_KF]
  ELSE
    $OUT[O_KS2_Schw] = FALSE
  ENDIF
;KS 3
  IF $OUT[O_KS3_Schw] AND $IN[I_R_SK_gesch] THEN
    $OUT[O_KS3_KYP3V] = TRUE
    $OUT[O_KS3_M1] = $IN[I_KS3_BE_3V] OR NOT $FLAG[Ausgl_an_KF]
  ELSE
    $OUT[O_KS3_Schw] = FALSE
  ENDIF
ENDIF
;KS B1 R
IF $OUT[O_R_Hand] AND NOT $OUT[O_R_Proz_akt] AND $OUT[O_KSB1_SchwR] THEN
  $OUT[O_KFB1_KYP1V] = TRUE
  $OUT[O_KSB1_M1V] = FALSE
  $OUT[O_KSB1_M1R] = $IN[I_KSB1_BE_3V] OR NOT $FLAG[Ausgl_an_KF]
ENDIF
;KS B1 V
IF $OUT[O_R_Hand] AND NOT $OUT[O_R_Proz_akt] AND $OUT[O_KSB1_SchwV] THEN
  $OUT[O_KFB1_KYP1V] = TRUE
  $OUT[O_KSB1_M1R] = FALSE
  $OUT[O_KSB1_M1V] = $IN[I_KSB1_BE_3V] OR NOT $FLAG[Ausgl_an_KF]
ENDIF
;KS B2 R
IF $OUT[O_R_Hand] AND NOT $OUT[O_R_Proz_akt] AND $OUT[O_KSB2_SchwR] THEN
  $OUT[O_KFB2_KYP1V] = TRUE
  $OUT[O_KSB2_M1V] = FALSE
  $OUT[O_KSB2_M1R] = $IN[I_KSB2_BE_3V] OR NOT $FLAG[Ausgl_an_KF]
ENDIF
;KS B2 V
IF $OUT[O_R_Hand] AND NOT $OUT[O_R_Proz_akt] AND $OUT[O_KSB2_SchwV] THEN
  $OUT[O_KFB2_KYP1V] = TRUE
  $OUT[O_KSB2_M1R] = FALSE
  $OUT[O_KSB2_M1V] = $IN[I_KSB2_BE_3V] OR NOT $FLAG[Ausgl_an_KF]
ENDIF
;ENDFOLD
;
;FOLD Merker Antriebe aus
IF NOT $COULD_START_MOTION AND ($PRO_STATE1==#P_STOP) THEN
  H_Antr_Aus=TRUE
ENDIF
IF $COULD_START_MOTION AND H_Antr_Aus AND ($PRO_STATE1==#P_ACTIVE) AND ($TORQMON[1]<50) THEN
  Antriebe_Aus=TRUE
  H_Antr_Aus=FALSE
ENDIF
IF ($PRO_STATE1==#P_FREE) OR $OUT[O_R_PFO] THEN
  Antriebe_Aus=FALSE
  H_Antr_Aus=FALSE
ENDIF
;ENDFOLD
;
;FOLD Ruecksetzen Schrittkette
IF ($APP_INT[5]<>2) AND NOT SKx_RESET THEN
  IF ($PRO_MODE1==#BSTEP) AND (($mode_op==#T1) OR ($mode_op==#T2)) AND NOT $IN[I_KS1_Arb_BE] AND NOT $IN[I_KS2_Arb_BE] AND NOT $IN[I_KS3_Arb_BE] THEN
    $APP_INT[5]=1
	SKx_RESET=TRUE
  ENDIF
ENDIF
IF ($APP_INT[5]==2) THEN
  SKx_RESET=FALSE
ENDIF
;ENDFOLD
;
;FOLD Ruecksetzen Tool_Corr und Base_Corr
IF ($PRO_MODE1==#BSTEP) AND (($mode_op==#T1) OR ($mode_op==#T2)) THEN
  Tool_Corr=$NULLFRAME
  Base_Corr=$NULLFRAME
ENDIF
;ENDFOLD
;
;FOLD Handfunktion Docking bei Profinet
IF $OUT[O_R_Hand] AND $COULD_START_MOTION AND NOT $OUT[O_R_Proz_akt] AND $FLAG[F_m_Profinet] THEN
  IF (DEF_ZANGE[30].Typ==1) AND (DEF_ZANGE[30].A_AUF>0) AND (DEF_ZANGE[30].A_ZU>0) AND (DEF_ZANGE[30].E_AUF>0) THEN
    IF ($OUT[DEF_ZANGE[30].A_AUF]==TRUE) THEN
      i=DEF_ZANGE[30].E_AUF
      ret=99
      IF (SZAxConfig>0) AND DOCK_SZ THEN
        $softplcint[1]=0
      ENDIF 
      IF (SZAxConfig>0) AND DOCK_NZ THEN
        $softplcint[4]=0
      ENDIF 
      IF (SZAxConfig>0) AND DOCK_CZ THEN
        $softplcint[6]=0
      ENDIF       
      IF B_PnetShare THEN ; Treiber >= 2.3.2_B6      
        Ret=ioctl("PNIO-CTRL",1060,i)
      ELSE
        Ret=ioctl("PNIO-CTRL",60,i)
      ENDIF
      SWITCH ret
        CASE 0  ; ioctl OK
          Basic_S_Msg(4,#NotifyMsg)
        CASE 1  ; ioctl Timeout
          Basic_S_Msg(5,#NotifyMsg)
        CASE 2  ; ioctl falscher Parameter
          Basic_S_Msg(6,#NotifyMsg)
        DEFAULT
      ENDSWITCH	
      $OUT[DEF_ZANGE[30].A_AUF]=FALSE
    ENDIF 
  ENDIF  
  IF (DEF_ZANGE[30].Typ==1) AND (DEF_ZANGE[30].A_AUF>0) AND (DEF_ZANGE[30].A_ZU>0) AND (DEF_ZANGE[30].E_ZU>0) THEN
    IF ($OUT[DEF_ZANGE[30].A_ZU]==TRUE) THEN
      i=DEF_ZANGE[30].E_ZU
      ret=99
      IF (SZAxConfig>0) AND DOCK_SP THEN
        $softplcint[1]=ActDockAx(1)
      ENDIF 
      IF (SZAxConfig>0) AND DOCK_NZ THEN
        $softplcint[4]=ActDockAx(1)
      ENDIF
      IF (SZAxConfig>0) AND DOCK_CZ THEN
        $softplcint[6]=ActDockAx(1)
      ENDIF      
      IF B_PnetShare THEN ; Treiber >= 2.3.2_B6      
        Ret=ioctl("PNIO-CTRL",1050,i)
      ELSE
        Ret=ioctl("PNIO-CTRL",50,i)
      ENDIF
      SWITCH ret
        CASE 0  ; ioctl OK
          Basic_S_Msg(3,#NotifyMsg)
        CASE 1  ; ioctl Timeout
          Basic_S_Msg(5,#NotifyMsg)
        CASE 2  ; ioctl falscher Parameter
          Basic_S_Msg(6,#NotifyMsg)
        DEFAULT
      ENDSWITCH	
      $OUT[DEF_ZANGE[30].A_ZU]=FALSE
    ENDIF  
  ENDIF
;
  IF (DEF_ZANGE[31].Typ==1) AND (DEF_ZANGE[31].A_AUF>0) AND (DEF_ZANGE[31].A_ZU>0) AND (DEF_ZANGE[31].E_AUF>0) THEN
    IF ($OUT[DEF_ZANGE[31].A_AUF]==TRUE) THEN
      i=DEF_ZANGE[31].E_AUF
      ret=99
      IF (SZAxConfig>0) AND DOCK_SP THEN
        $softplcint[2]=0
      ENDIF
      IF (SZAxConfig>0) AND DOCK_NZ THEN
        $softplcint[5]=0
      ENDIF 
      IF (SZAxConfig>0) AND DOCK_CZ THEN
        $softplcint[7]=0
      ENDIF         
      IF B_PnetShare THEN ; Treiber >= 2.3.2_B6      
        Ret=ioctl("PNIO-CTRL",1060,i)
      ELSE
        Ret=ioctl("PNIO-CTRL",60,i)
      ENDIF
      SWITCH ret
        CASE 0  ; ioctl OK
          Basic_S_Msg(4,#NotifyMsg)
        CASE 1  ; ioctl Timeout
          Basic_S_Msg(5,#NotifyMsg)
        CASE 2  ; ioctl falscher Parameter
          Basic_S_Msg(6,#NotifyMsg)
        DEFAULT
      ENDSWITCH	
      $OUT[DEF_ZANGE[31].A_AUF]=FALSE
    ENDIF  
  ENDIF 
  IF (DEF_ZANGE[31].Typ==1) AND (DEF_ZANGE[31].A_AUF>0) AND (DEF_ZANGE[31].A_ZU>0) AND (DEF_ZANGE[31].E_ZU>0) THEN
    IF ($OUT[DEF_ZANGE[31].A_ZU]==TRUE) THEN
      i=DEF_ZANGE[31].E_ZU
      ret=99
      IF (SZAxConfig>0) AND DOCK_SP THEN
        $softplcint[2]=ActDockAx(2)
      ENDIF 
      IF (SZAxConfig>0) AND DOCK_NZ THEN
        $softplcint[5]=ActDockAx(2)
      ENDIF
      IF (SZAxConfig>0) AND DOCK_CZ THEN
        $softplcint[7]=ActDockAx(2)
      ENDIF   
      IF B_PnetShare THEN ; Treiber >= 2.3.2_B6      
        Ret=ioctl("PNIO-CTRL",1050,i)
      ELSE
        Ret=ioctl("PNIO-CTRL",50,i)
      ENDIF
      SWITCH ret
        CASE 0  ; ioctl OK
          Basic_S_Msg(3,#NotifyMsg)
        CASE 1  ; ioctl Timeout
          Basic_S_Msg(5,#NotifyMsg)
        CASE 2  ; ioctl falscher Parameter
          Basic_S_Msg(6,#NotifyMsg)
        DEFAULT
      ENDSWITCH	
      $OUT[DEF_ZANGE[31].A_ZU]=FALSE
    ENDIF  
  ENDIF      
;
  IF (DEF_ZANGE[32].Typ==1) AND (DEF_ZANGE[32].A_AUF>0) AND (DEF_ZANGE[32].A_ZU>0) AND (DEF_ZANGE[32].E_AUF>0) THEN
    IF ($OUT[DEF_ZANGE[32].A_AUF]==TRUE) THEN
      i=DEF_ZANGE[32].E_AUF
      ret=99
      IF (SZAxConfig>0) AND DOCK_SP THEN
        $softplcint[3]=0
      ENDIF 
      IF B_PnetShare THEN ; Treiber >= 2.3.2_B6      
        Ret=ioctl("PNIO-CTRL",1060,i)
      ELSE
        Ret=ioctl("PNIO-CTRL",60,i)
      ENDIF
      SWITCH ret
        CASE 0  ; ioctl OK
          Basic_S_Msg(4,#NotifyMsg)
        CASE 1  ; ioctl Timeout
          Basic_S_Msg(5,#NotifyMsg)
        CASE 2  ; ioctl falscher Parameter
          Basic_S_Msg(6,#NotifyMsg)
        DEFAULT
      ENDSWITCH	
      $OUT[DEF_ZANGE[32].A_AUF]=FALSE
    ENDIF  
  ENDIF 
  IF (DEF_ZANGE[32].Typ==1) AND (DEF_ZANGE[32].A_AUF>0) AND (DEF_ZANGE[32].A_ZU>0) AND (DEF_ZANGE[32].E_ZU>0) THEN
    IF ($OUT[DEF_ZANGE[32].A_ZU]==TRUE) THEN
      i=DEF_ZANGE[32].E_ZU
      ret=99
      IF (SZAxConfig>0) AND DOCK_SP AND NOT ReserveBool[49] AND NOT ReserveBool[50] THEN
        $softplcint[3]=ActDockAx(3)
      ENDIF   
      IF B_PnetShare THEN ; Treiber >= 2.3.2_B6      
        Ret=ioctl("PNIO-CTRL",1050,i)
      ELSE
        Ret=ioctl("PNIO-CTRL",50,i)
      ENDIF
      SWITCH ret
        CASE 0  ; ioctl OK
          Basic_S_Msg(3,#NotifyMsg)
        CASE 1  ; ioctl Timeout
          Basic_S_Msg(5,#NotifyMsg)
        CASE 2  ; ioctl falscher Parameter
          Basic_S_Msg(6,#NotifyMsg)
        DEFAULT
      ENDSWITCH	
      $OUT[DEF_ZANGE[32].A_ZU]=FALSE
    ENDIF  
  ENDIF        
ENDIF  
;ENDFOLD
;
;FOLD Docking
IF Docking THEN
  DK_LOOP()
ENDIF
;ENDFOLD
;
;FOLD VirtualAxis
IF SZ_VORHANDEN THEN
  VA_LOOP( )
ENDIF
;ENDFOLD
;
;FOLD Produktion ohne Bauteil
POT_LOOP( )
;ENDFOLD
;
;FOLD INOS Lebensbit
IF B_MIT_INOS THEN
  ino_lifebit( )
ENDIF
;ENDFOLD (INOS)
;
;FOLD HGV Lebensbit-Ueberwachung
IF B_MIT_HGV THEN
  HGV_LBit()
ENDIF
;ENDFOLD (HGV)
;
END
;ENDFOLD
;
;-----------------------------------------------------------
;FOLD KS Abschalten
GLOBAL DEF KS_Abschalten(KS_Nr :IN)
INT KS_Nr
;
SWITCH KS_Nr
  CASE 1,2 ;KS 1
    $OUT[O_KS1_KYP3V] = FALSE
    $OUT[O_KS1_M1] = FALSE
    $OUT[O_KS1_Schw] = FALSE
;
  CASE 3 ;KS 2
    $OUT[O_KS2_KYP3V] = FALSE
    $OUT[O_KS2_M1] = FALSE
    $OUT[O_KS2_Schw] = FALSE
;      
    ; KSB2 Mutterbuckeln
    $OUT[O_KSB2_KYP3V] = FALSE
    $OUT[O_KSB2_M1R] = FALSE  
;
  CASE 4 ;KS 2      
    $OUT[O_KS2_KYP3V] = FALSE
    $OUT[O_KS2_M1] = FALSE
    $OUT[O_KS2_Schw] = FALSE
;
    ; KSB2 Mutterbuckeln
    $OUT[O_KSB2_KYP3V] = FALSE
    $OUT[O_KSB2_M1V] = FALSE       
;
  CASE 5 ;KS 3
    $OUT[O_KS3_KYP3V] = FALSE
    $OUT[O_KS3_M1] = FALSE
    $OUT[O_KS3_Schw] = FALSE
;
    ; KSB1 Mutterbuckeln
    $OUT[O_KSB1_KYP3V] = FALSE
    $OUT[O_KSB1_M1R] = FALSE
;
  CASE 6 ;KS 3
    $OUT[O_KS3_KYP3V] = FALSE
    $OUT[O_KS3_M1] = FALSE
    $OUT[O_KS3_Schw] = FALSE
;
    ; KSB1 Mutterbuckeln
    $OUT[O_KSB1_KYP3V] = FALSE
    $OUT[O_KSB1_M1V] = FALSE      
;
  DEFAULT
ENDSWITCH    
;
END
;ENDFOLD
;
;-----------------------------------------------------------
;FOLD Kuehlwasser in Single-Step vorhanden
GLOBAL DEF KW_vorhanden()
;
IF $OUT[O_R_Hand] THEN
  $FLAG[F_SZ1_KW_vor] = $IN[I_R_KW1_vorh] OR $FLAG[F_SZ1_KW_vor] ;RIP 1
  $FLAG[F_SZ2_KW_vor] = $IN[I_R_KW2_vorh] OR $FLAG[F_SZ2_KW_vor] ;RIP 2
  $FLAG[F_SZ3_KW_vor] = $IN[I_R_KW3_vorh] OR $FLAG[F_SZ3_KW_vor] ;RIP 3
ENDIF
;
END
;ENDFOLD  
;
;-----------------------------------------------------------
;FOLD Meldungsausgabe
DEF Basic_S_Msg(msg_nr :IN, MsgTyp :IN, CmdNr :IN )
INT msg_nr, CmdNr
DECL _MsgType MsgTyp
DECL KrlMsg_T USER_MSG
DECL KrlMsgPar_T Par[3]
DECL KrlMsgOpt_T Opt
INT nHandle, Answer;
USER_MSG = { Modul[] "VW_USR_S", Nr -1, Msg_txt[] " "}
Opt = { VL_Stop FALSE, Clear_P_Reset FALSE, Log_To_DB TRUE }
;
IF Varstate("CmdNr")==#initialized then
  SWITCH CmdNr
    CASE 1
      Par[1] = { Par_type #Value, Par_int 1 }
    CASE 2
      Par[1] = { Par_type #Value, Par_int 2 }
    CASE 3
      Par[1] = { Par_type #Value, Par_int 3 }
    CASE 4
      Par[1] = { Par_type #Value, Par_int 4 }
    CASE 5
      Par[1] = { Par_type #Value, Par_int 5 }
    CASE 6
      Par[1] = { Par_type #Value, Par_int 6 }
    DEFAULT
      Par[1] = { Par_type #Value, Par_txt[] " " }
  ENDSWITCH
ELSE
  Par[1] = { Par_type #Value, Par_txt[] " " }
ENDIF
IF ((n_USRS_Handle[msg_nr]<0) OR (MsgTyp==#NotifyMsg) OR (MsgTyp==#QuitMsg)) THEN
  USER_MSG.Nr = msg_nr
  SWITCH msg_nr
    CASE 1
	   USER_MSG.MSG_TXT[]="Ausgleich fuer Zangenfunktion abgebrochen, neu anwaehlen"
    CASE 2
      USER_MSG.MSG_TXT[]="Fehler bei automatischer Archivierung, Code %1"	  
    CASE 3
      USER_MSG.MSG_TXT[]="PNIO Teilnehmer angedockt"
    CASE 4
      USER_MSG.MSG_TXT[]="PNIO Teilnehmer abgedockt"
    CASE 5
      USER_MSG.MSG_TXT[]="PNIO Timeout bei Docking"
    CASE 6
      USER_MSG.MSG_TXT[]="PNIO IOCTL falscher Parameter"     
    CASE 7
	   USER_MSG.MSG_TXT[]=" "
    CASE 8
	   USER_MSG.MSG_TXT[]=" "  
    DEFAULT
	   USER_MSG.MSG_TXT[]="unbekannte Meldung"
  ENDSWITCH
  SWITCH MsgTyp
    CASE #StateMsg
      n_USRS_Handle[msg_nr] = Set_KrlMsg (#State, USER_MSG, Par[], Opt) ;Ausgabe Statusmeldung
    CASE #QuitMsg
      n_USRS_Handle[msg_nr] = Set_KrlMsg (#Quit, USER_MSG, Par[], Opt) ;Ausgabe Quittierungsmeldung
    CASE #NotifyMsg
      n_USRS_Handle[msg_nr] = Set_KrlMsg (#Notify, USER_MSG, Par[], Opt) ;Ausgabe Hinweismeldung
    DEFAULT
      n_USRS_Handle[msg_nr] = Set_KrlMsg (#Quit, USER_MSG, Par[], Opt) ;Ausgabe Quittierungsmeldung
  ENDSWITCH
ENDIF
;
END
;ENDFOLD
;
;-----------------------------------------------------------
;FOLD Useraufrufe aus den Makros
  ;FOLD MakroSPS
  DEF  USER_MAKRO_SPS (CMD_SEL :IN,PAR1 :IN,PAR2 :IN, PAR3 :IN,PAR4 :IN,PAR5 :IN,PAR6 :IN,PAR7 :IN)
  ;Aufruf Aus dem MakroSPS
  INT CMD_SEL,PAR1,PAR2,PAR3,PAR4,PAR5,PAR6
  BOOL PAR7
  End
  ;ENDFOLD
;
  ;FOLD MakroSAW
  DEF  USER_MAKRO_SAW (CMD_SEL :IN,PAR1 :IN,PAR2 :IN, PAR3 :IN,PAR4 :IN,PAR5 :IN,PAR6 :IN,PAR7 :IN)
  ;Aufruf Aus dem MakroSAW
  INT CMD_SEL,PAR1,PAR2,PAR3,PAR4,PAR5,PAR6
  BOOL PAR7
  End
  ;ENDFOLD
;
  ;FOLD MakroSTEP
  DEF  USER_MAKRO_STEP (CMD_SEL :IN,PAR1 :IN,PAR2 :IN, PAR3 :IN,PAR4 :IN,PAR5 :IN,PAR6 :IN,PAR7 :IN)
  ;Aufruf Aus dem MakroSTEP
  INT CMD_SEL,PAR1,PAR2,PAR3,PAR4,PAR5,PAR6
  BOOL PAR7
  End
  ;ENDFOLD
;
  ;FOLD MakroTrigger
  DEF  USER_MAKRO_TRIG (CMD_SEL :IN,PAR1 :IN,PAR2 :IN, PAR3 :IN,PAR4 :IN,PAR5 :IN,PAR6 :IN,PAR7 :IN)
  ;Aufruf Aus dem MakroTrigger
  INT CMD_SEL,PAR1,PAR2,PAR3,PAR4,PAR5,PAR6
  BOOL PAR7
  End
  ;ENDFOLD
;ENDFOLD "Useraufrufe aus den Makros"

