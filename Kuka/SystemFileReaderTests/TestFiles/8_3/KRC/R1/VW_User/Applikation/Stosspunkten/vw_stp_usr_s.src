&ACCESS  RV
&PARAM DISKPATH = VW_User/Applikation/Stosspunkten
&PARAM TPVW_VERSION = 8.3.8
&REL 200
DEF vw_stp_usr_s( )
; 
;*-----------------------------------------------------*
;*Technologiepaket Stosspunkten                        *
;*                                                     *
;*Konzernstandard                                      *
;*Bearbeiter: W. Lehmeier I/PG-C61                     *
;*                                                     *
;* Erstellt am:                                        *
;* 2015.06.15 LE                                      *
;*                                                     *
;*------------------------------------------------------
; 
END
;
;FOLD INIT Stosspunkten 
GLOBAL DEF STP_INIT( )
INT i
;
;FOLD Version Techpaket
Tech_Stosspunkten.Name[]="KS24.01.003_170407"
;ENDFOLD
;
;FOLD Vorbesetzung Meldungsausgabe
FOR i = 1 TO 100
  n_STPS_Handle[i]=-1
  n_STPR_Handle[i]=-1
ENDFOR
;ENDFOLD
;
;FOLD TimerInit
Timer_Stossp=$ROB_TIMER
TimerNr_STP=$ROB_TIMER
;ENDFOLD
;
END
;ENDFOLD
;
;-----------------------------------------------------------
;FOLD SAW Stosspunkten 
GLOBAL DEF STP_SAW( )
INT i
;
IF NOT $OUT[O_STP_Re_aus] THEN
  $OUT[O_STP_S_TPos]=FALSE
  $OUT[O_STP_ref]=FALSE
  $OUT[O_STP_FRG]=FALSE
  $OUT[O_STP_auf]=FALSE
  $OUT[O_STP_zu]=FALSE
  $OUT[O_STP_t_auf]=FALSE
  $OUT[O_STP_t_zu]=FALSE
ENDIF
HA1_FKT_STP1=FALSE
HA2_FKT_STP1=FALSE
;
END
;ENDFOLD
;
;-----------------------------------------------------------
;FOLD RESET Stosspunkten 
GLOBAL DEF STP_RESET( )
INT i
;
IF NOT $OUT[O_STP_Re_aus] THEN
  $OUT[O_STP_S_TPos]=FALSE
  $OUT[O_STP_ref]=FALSE
  $OUT[O_STP_FRG]=FALSE
  $OUT[O_STP_auf]=FALSE
  $OUT[O_STP_zu]=FALSE
  $OUT[O_STP_t_auf]=FALSE
  $OUT[O_STP_t_zu]=FALSE
ENDIF
HA1_FKT_STP1=FALSE
HA2_FKT_STP1=FALSE
;
END
;ENDFOLD
;
;-----------------------------------------------------------
;FOLD CANCEL Stosspunkten 
GLOBAL DEF STP_CANCEL( )
INT i
;
IF NOT $OUT[O_STP_Re_aus] THEN
  $OUT[O_STP_S_TPos]=FALSE
  $OUT[O_STP_ref]=FALSE
  $OUT[O_STP_FRG]=FALSE
  $OUT[O_STP_auf]=FALSE
  $OUT[O_STP_zu]=FALSE
  $OUT[O_STP_t_auf]=FALSE
  $OUT[O_STP_t_zu]=FALSE
ENDIF
HA1_FKT_STP1=FALSE
HA2_FKT_STP1=FALSE
;
END
;ENDFOLD
;
;-----------------------------------------------------------
;FOLD LOOP Stosspunkten
GLOBAL DEF STP_LOOP( )
;
;STP Funktionstest ohne Bauteil
$OUT[O_STP_FToBT]=$IN[I_FT_o_BT] 
;
;Betriebsarten
;BA-Hand setzen
IF $OUT[O_R_Hand] AND (NOT $COULD_START_MOTION OR HA2_FKT_STP1) THEN
  $OUT[O_STP_R_Hand]=TRUE
  $OUT[O_STP_R_Auto]=FALSE
ENDIF
;
;BA-AUTO setzen
IF ($OUT[O_R_Hand] AND NOT HA2_FKT_STP1 AND ($OUT[O_R_Proz_akt] OR $OUT[O_R_bewegt] OR TA1_AKT_STP1 OR HA1_FKT_STP1)) OR $OUT[O_R_Auto] THEN
  $OUT[O_STP_R_Hand]=FALSE
  $OUT[O_STP_R_Auto]=TRUE
ENDIF
;
;Ausgabe Fehlermeldungen
;
;Vorwarnung Zange
$OUT[O_STP_W_SZ]=$OUT[O_R_Auto] AND $IN[I_STP_W_SZ]
;Warnung Schmierung
$OUT[O_STP_W_Schm]=$OUT[O_R_Auto] AND $IN[I_STP_W_Schm]
;Kraftaufbau zu lange
$OUT[O_STP_F_Kraf]=$OUT[O_R_Auto] AND $IN[I_STP_F_Kraf]
;Programmfehler/falsche Kraftvorgabe
$OUT[O_STP_F_Prog]=$OUT[O_R_Auto] AND $IN[I_STP_F_Prog]
;Zielposition ungueltig
$OUT[O_STP_F_Ziel]=$OUT[O_R_Auto] AND $IN[I_STP_F_Ziel]
;Bauteilfehler
$OUT[O_STP_F_Baut]=$OUT[O_R_Auto] AND $IN[I_STP_F_Baut]
;Zange geht schwer
$OUT[O_STP_F_schw]=$OUT[O_R_Auto] AND $IN[I_STP_F_schw]
;Fraesen n.i.O.
$OUT[O_STP_F_Frae]=$OUT[O_R_Auto] AND $IN[I_STP_F_Frae]
;Fehler Kappenverschleiss/Geometrie
$OUT[O_STP_F_Geom]=$OUT[O_R_Auto] AND ($IN[I_STP_F_Kapp] OR $IN[I_STP_F_Geom])
;Fehler Ausgleichssystem
$OUT[O_STP_F_Ausg]=$OUT[O_R_Auto] AND $IN[I_STP_F_Ausg]
;Fehler Steuerung/Regler
$OUT[O_STP_F_Steu]=$OUT[O_R_Auto] AND $COULD_START_MOTION AND $IN[I_STP_F_Steu] AND $timer_flag[TimerNr_Ein]
;Fehler Temperatur Motor/Trafo
$OUT[O_STP_F_Temp]=$OUT[O_R_Auto] AND ($IN[I_STP_F_Traf] OR $IN[I_STP_F_Mot]) 
;Sammelstoerung
IF NOT $IN[I_STP_Kappe] AND NOT MIT_KW1 AND $OUT[O_R_Auto] AND $COULD_START_MOTION THEN
  STP_Fe_Kappe=($ROB_TIMER-Timer_Stossp)>5000
ELSE
  Timer_Stossp=$ROB_TIMER
  STP_Fe_Kappe=FALSE
ENDIF  
$OUT[O_STP_Sammel]=$OUT[O_R_Auto] AND $COULD_START_MOTION AND (STP_Fe_Kappe OR $IN[I_STP_Sammel] OR $FLAG[F_STP_Sammel]) AND $timer_flag[TimerNr_Ein]
IF (Prog_Nr_STP<99) THEN
  Fzg_Typ_STP=0
  SK1_Fzg_Typ=0
ENDIF
;  
;Quittierung Stoerung
$OUT[O_STP_Fe_Res]=$IN[I_STP_Sammel] AND ($IN[I_R_Quit_Wei] OR $IN[I_R_Quit_St])
;
;Ausgabe Zangencode
IF NOT Docking OR (Docking AND (ReserveBool[43]==FALSE)) THEN
  STP_ZCode=1
ENDIF
;
;Kraftvorgabe
IF $OUT[O_R_Hand] AND $FLAG[F_o_Prozess] THEN
  STP_Kraft_Soll = M_Kraft_Soll
ELSE  
  STP_Kraft_Soll = SK1_Kraft_Soll
ENDIF  
;
;Sollwert Vorgabe und Sollposition gueltig
IF (Stos_sollPos>0) AND NOT TA1_AKT_STP1 THEN
  $OUT[O_STP_SPos_g]=TRUE
ELSE
  $OUT[O_STP_SPos_g]=FALSE
ENDIF
IF (Stos_sollPos==0) THEN
  Stos_sollPos=200
ENDIF
;
;Tastend ruecksetzen
IF $OUT[O_R_Hand] AND TA1_AKT_STP1 AND NOT $OUT[O_STP_t_auf] AND NOT $OUT[O_STP_t_zu] THEN
  TA1_AKT_STP1=FALSE
  $OUT[O_STP_FRG]=FALSE
  schleppfehler=TRUE
  sf_prog_status=#user_act
  $OUT[O_STP_SPos_g]=FALSE
ENDIF
;
;INIT Zangenfunktion
IF $OUT[O_R_Hand] AND NOT $OUT[O_R_Auto] AND $OUT[O_R_PERI_RDY] AND (NOT $OUT[O_R_Proz_akt] AND NOT $OUT[O_R_bewegt]) THEN
  IF ($OUT[O_STP_ref] OR $OUT[O_STP_auf] OR $OUT[O_STP_zu] OR $OUT[O_STP_t_auf] OR $OUT[O_STP_t_zu]) THEN 
    STP_Z_Funkt()
  ENDIF
ENDIF
;
IF ($OUT[O_R_Hand] AND ( $PRO_MODE1==#BSTEP)) OR ($OUT[O_R_Hand] AND NOT $FLAG[F_SZ_AH_KOMP] AND $OUT[O_R_bewegt] AND (R1AusgleichFunktion==0)) OR ($OUT[O_R_Hand] AND NOT $COULD_START_MOTION) THEN
  IF NOT $OUT[O_STP_Re_aus] THEN
    $OUT[O_STP_S_TPos]=FALSE
    $OUT[O_STP_ref]=FALSE
    $OUT[O_STP_FRG]=FALSE
    $OUT[O_STP_auf]=FALSE
    $OUT[O_STP_zu]=FALSE
    $OUT[O_STP_t_auf]=FALSE
    $OUT[O_STP_t_zu]=FALSE
  ENDIF
  HA1_FKT_STP1=FALSE
  HA2_FKT_STP1=FALSE
  ENDIF
  
IF  ($in[766] or $in[767] or $in[768])  THEN
    LBitServoP = true
ELSE
   LBitServoP = false
ENDIF  
;	
;Lebensbit_Ueberwachung

IF LBitServoP THEN
STP_LBit()
ENDIF
;
END
;ENDFOLD
;
;------------------------------------------------------
;FOLD Zangenfunktion
DEF STP_Z_Funkt()
;STP Oeffnen in Hand
IF $OUT[O_STP_auf] THEN	
  $OUT[O_STP_FRG]=TRUE
  $OUT[O_STP_zu]=FALSE
  HA1_FKT_STP1=TRUE
  IF $IN[I_STP_auf] THEN
    $OUT[O_STP_auf]=FALSE
  ENDIF
ENDIF
;
;STP Schliessen in Hand
IF $OUT[O_STP_zu] THEN	
  $OUT[O_STP_FRG]=TRUE
  $OUT[O_STP_auf]=FALSE
  HA1_FKT_STP1=TRUE
  IF $IN[I_STP_zu] THEN
    $OUT[O_STP_zu]=FALSE
  ENDIF
ENDIF  
;
;STP Fahrt auf Teachposition ausloesen
IF $OUT[O_STP_S_TPos] THEN
  $OUT[O_STP_TPos_u]=FALSE
  HA2_FKT_STP1=TRUE
  WAIT SEC 0.4
  $OUT[O_STP_FRG]=TRUE
  IF $IN[I_STP_TPos_g] THEN
    $OUT[O_STP_S_TPos]=FALSE
    $OUT[O_STP_TPos_u]=TRUE
    sf_prog_status=#user_act
    $OUT[O_STP_SPos_g]=FALSE
    WAIT SEC 0.4
    schleppfehler=TRUE
    $OUT[O_STP_FRG]=FALSE
    $OUT[O_STP_TPos_u]=FALSE
    HA2_FKT_STP1=FALSE
  ENDIF
ENDIF
;
;STP Referenzieren
IF $OUT[O_STP_ref] THEN	
  $OUT[O_STP_FRG]=TRUE
  HA2_FKT_STP1=TRUE
  IF NOT $IN[I_STP_ref] THEN
    B_STP_n_Ref=TRUE
  ENDIF	
  IF $IN[I_STP_ref] AND $IN[I_STP_IPos_g] AND B_STP_n_Ref THEN
    $OUT[O_STP_ref]=FALSE
    $OUT[O_STP_FRG]=FALSE
    HA2_FKT_STP1=FALSE
	 B_STP_n_Ref=FALSE
    Stossp_Msg(2,#NotifyMsg)
  ENDIF
ENDIF
;
;STP Tastend Auf
IF $OUT[O_STP_t_auf] THEN	
  TA1_AKT_STP1=TRUE
  $OUT[O_STP_FRG]=TRUE
ENDIF  
;
;SZ 1 Tastend Zu
IF $OUT[O_STP_t_zu] THEN	
  TA1_AKT_STP1=TRUE
  $OUT[O_STP_FRG]=TRUE
ENDIF
; 
END
;ENDFOLD (Zangenfunktion)
;
;-----------------------------------------------------------
;FOLD Lebensbit STP
DEF STP_LBit()
BOOL LBitSTP, LBitFault, bRet
LBitFault=FALSE
;Setzen - Rucksetzen Lebensbit Roboter
$OUT[O_STP_LBit]=NOT $IN[I_STP_LBit]
;Pruefen Lebensbit von STP
IF $IN[I_STP_LBit]==FALSE THEN
  IF LBitSTPRem==FALSE THEN
    TimerNr_STP=$ROB_TIMER
  ENDIF  
  LBitSTPRem=TRUE
ELSE
  IF LBitSTPRem==TRUE THEN
    TimerNr_STP=$ROB_TIMER
  ENDIF  
  LBitSTPRem=FALSE
ENDIF
;
IF ($ROB_TIMER - TimerNr_STP) > 5000 THEN
  LBitFault=TRUE
  STP_LBitFeh=TRUE
ENDIF
;
IF LBitFault THEN
  Stossp_Msg(1,#StateMsg)
ELSE
  STP_LBitFeh=FALSE
  IF n_STPS_Handle[1]>-1 THEN
    bRet=Clear_KrlMsg(n_STPS_Handle[1])
    n_STPS_Handle[1]=-1
  ENDIF
ENDIF
END
;ENDFOLD
;
;-----------------------------------------------------------
;FOLD STP_Meldungen
DEF Stossp_Msg(msg_nr :IN, MsgTyp :IN, STPNr :IN)
INT msg_nr, STPNr, Answer
DECL STPS_MsgType MsgTyp
DECL KrlMsg_T USER_MSG
DECL KrlMsgPar_T Par[3]
DECL KrlMsgOpt_T Opt
;
USER_MSG = { Modul[] "STP_S_Msg", Nr -1, Msg_txt[] " "}
Opt = { VL_Stop FALSE, Clear_P_Reset TRUE, Log_To_DB TRUE }
Par[1] = { Par_type #Value, Par_txt[] " " }
;
IF Varstate("STPNr")==#initialized then
  SWITCH STPNr
    CASE 1
      Par[1] = { Par_type #Value, Par_int 1 }
    CASE 2
      Par[1] = { Par_type #Value, Par_int 2 }
    CASE 3
      Par[1] = { Par_type #Value, Par_int 3 }
    CASE 4
      Par[1] = { Par_type #Value, Par_int 4 }
    CASE 5
      Par[1] = { Par_type #Value, Par_int 5 }
    CASE 6
      Par[1] = { Par_type #Value, Par_int 6 }
    DEFAULT
      Par[1] = { Par_type #Value, Par_txt[] " " }
  ENDSWITCH
ELSE
  Par[1] = { Par_type #Value, Par_txt[] " " }
ENDIF
;
IF ((n_STPS_Handle[msg_nr]<0) OR (MsgTyp==#NotifyMsg) OR (MsgTyp==#QuitMsg)) THEN
  USER_MSG.Nr = msg_nr
  SWITCH msg_nr
    CASE 1
	   USER_MSG.MSG_TXT[]="keine Antwort auf Lebensbit"
    CASE 2
	   USER_MSG.MSG_TXT[]="STP-Zange referenziert "
    CASE 3
	   USER_MSG.MSG_TXT[]=" "
    CASE 4
	   USER_MSG.MSG_TXT[]=" "
    DEFAULT
	   USER_MSG.MSG_TXT[]="unbekannte Meldung"
  ENDSWITCH
  SWITCH MsgTyp
    CASE #StateMsg
      n_STPS_Handle[msg_nr] = Set_KrlMsg (#State, USER_MSG, Par[], Opt) ;Ausgabe Statusmeldung
    CASE #QuitMsg
      n_STPS_Handle[msg_nr] = Set_KrlMsg (#Quit, USER_MSG, Par[], Opt) ;Ausgabe Quittierungsmeldung
    CASE #NotifyMsg
      n_STPS_Handle[msg_nr] = Set_KrlMsg (#Notify, USER_MSG, Par[], Opt) ;Ausgabe Hinweismeldung
    DEFAULT
      n_STPS_Handle[msg_nr] = Set_KrlMsg (#Quit, USER_MSG, Par[], Opt) ;Ausgabe Quittierungsmeldung
  ENDSWITCH
ENDIF
END
;
;ENDFOLD (STP Meldungen)
