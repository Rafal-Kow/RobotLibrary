&ACCESS  RV
&PARAM DISKPATH = VW_User/Applikation/Stanz_Mutter
&PARAM TPVW_VERSION = 8.3.8
&REL 200
DEF vw_sm_usr_s( )
; 
;*-----------------------------------------------------*
;*Technologiepaket StanzMutter                         *
;*                                                     *
;*Konzernstandard                                      *
;*Bearbeiter: W. Lehmeier I/PG-C61                     *
;*                                                     *
;* Erstellt am:                                        *
;* 2015.06.16 LE                                       *
;*                                                     *
;*------------------------------------------------------
; 
END
;
;FOLD INIT StanzMutter 
GLOBAL DEF SM_INIT( )
INT i
;
;FOLD Version Techpaket
Tech_StanzMutter.Name[]="KS24.01.002_160316"
;ENDFOLD
;
;FOLD Vorbesetzung Meldungsausgabe
FOR i = 1 TO 100
  n_SMS_Handle[i]=-1
  n_SMR_Handle[i]=-1
ENDFOR
;ENDFOLD
;
END
;ENDFOLD
;
;-----------------------------------------------------------
;FOLD SAW StanzMutter 
GLOBAL DEF SM_SAW( )
INT i
;
;
END
;ENDFOLD
;
;-----------------------------------------------------------
;FOLD RESET StanzMutter 
GLOBAL DEF SM_RESET( )
INT i
;
;
END
;ENDFOLD
;
;-----------------------------------------------------------
;FOLD CANCEL StanzMutter 
GLOBAL DEF SM_CANCEL( )
INT i
;
;
END
;ENDFOLD
;
;-----------------------------------------------------------
;FOLD LOOP StanzMutter 1 
GLOBAL DEF SM1_LOOP( )
;
;Vorwahl ohne Prozess
$OUT[O_SM1_o_Proz]=$IN[I_SM1_o_Proz] OR $FLAG[F_o_Prozess]
;
;SM 1 Anwahl Energiesparmodus
$OUT[O_SM1_E_Mode] = (($Brake_Sig==0) AND $timer_flag[TimerNr_E_Mo] AND e_Mode_Hilf2)
;
;BA-Hand an SM 1 setzen
IF $OUT[O_R_Hand] AND NOT $COULD_START_MOTION THEN
  $OUT[O_SM1_Hand]=TRUE
  $OUT[O_SM1_Auto]=FALSE
ENDIF
;
;BA-AUTO an SM 1 setzen
IF (($OUT[O_R_Hand] AND ($OUT[O_R_Proz_akt] OR $OUT[O_SM1_St_R] OR $OUT[O_SM1_St_V]) AND $COULD_START_MOTION) OR $OUT[O_R_Auto]) THEN
  $OUT[O_SM1_Hand]=FALSE
  $OUT[O_SM1_Auto]=TRUE
ENDIF    
;
;Ausgabe Fehlermeldungen
;  
;Prozess n.i.O.
$OUT[O_SM1_Pr_niO]=$OUT[O_R_Auto] AND $OUT[O_SM1_P_akt] AND $IN[I_SM1_FK] AND NOT $IN[I_SM1_Pr_iO]
;Vorwarnung liegt an
$OUT[O_SM1_VW]=$OUT[O_R_Auto] AND $IN[I_SM1_VW]
;Wartungswarnung liegt an
$OUT[O_SM1_Warn]=$OUT[O_R_Auto] AND $IN[I_SM1_Warn]
;Prozessmaterial fehlt
$OUT[O_SM1_Mat]=$OUT[O_R_Auto] AND $IN[I_SM1_Mat]
;Betriebsbereit fehlt
$OUT[O_SM1_Bereit]=$OUT[O_R_Auto] AND $COULD_START_MOTION AND NOT $IN[I_SM1_Bereit] AND $FLAG[F_SM1_Samel] AND $timer_flag[TimerNr_Ein]
;Sammelstoerung
$OUT[O_SM1_Sammel]=$OUT[O_R_Auto] AND $COULD_START_MOTION AND (($OUT[O_SM1_P_akt] AND $IN[I_SM1_FK] AND NOT $IN[I_SM1_Pr_iO]) OR $IN[I_SM1_Sammel] OR SM1_LBitFeh)
;
;Lebensbit_Ueberwachung
L_Bit_SM(1)
;
END
;ENDFOLD
;
;-----------------------------------------------------------
;FOLD LOOP StanzMutter 2
GLOBAL DEF SM2_LOOP( )
;
;Vorwahl ohne Prozess
$OUT[O_SM2_o_Proz]=$IN[I_SM2_o_Proz] OR $FLAG[F_o_Prozess]
;
;SM 2 Anwahl Energiesparmodus
$OUT[O_SM2_E_Mode] = (($Brake_Sig==0) AND $timer_flag[TimerNr_E_Mo] AND e_Mode_Hilf2)
;
;BA-Hand an SM 2 setzen
IF $OUT[O_R_Hand] AND NOT $COULD_START_MOTION THEN
  $OUT[O_SM2_Hand]=TRUE
  $OUT[O_SM2_Auto]=FALSE
ENDIF
;
;BA-AUTO an SM 2 setzen
IF (($OUT[O_R_Hand] AND ($OUT[O_R_Proz_akt] OR $OUT[O_SM2_St_R] OR $OUT[O_SM2_St_V]) AND $COULD_START_MOTION) OR $OUT[O_R_Auto]) THEN
  $OUT[O_SM2_Hand]=FALSE
  $OUT[O_SM2_Auto]=TRUE
ENDIF    
;
;Ausgabe Fehlermeldungen
;  
;Prozess n.i.O.
$OUT[O_SM2_Pr_niO]=$OUT[O_R_Auto] AND $OUT[O_SM2_P_akt] AND $IN[I_SM2_FK] AND NOT $IN[I_SM2_Pr_iO]
;Vorwarnung liegt an
$OUT[O_SM2_VW]=$OUT[O_R_Auto] AND $IN[I_SM2_VW]
;Wartungswarnung liegt an
$OUT[O_SM2_Warn]=$OUT[O_R_Auto] AND $IN[I_SM2_Warn]
;Prozessmaterial fehlt
$OUT[O_SM2_Mat]=$OUT[O_R_Auto] AND $IN[I_SM2_Mat]
;Betriebsbereit fehlt
$OUT[O_SM2_Bereit]=$OUT[O_R_Auto] AND $COULD_START_MOTION AND NOT $IN[I_SM2_Bereit] AND $FLAG[F_SM2_Samel] AND $timer_flag[TimerNr_Ein]
;Sammelstoerung
$OUT[O_SM2_Sammel]=$OUT[O_R_Auto] AND $COULD_START_MOTION AND (($OUT[O_SM2_P_akt] AND $IN[I_SM2_FK] AND NOT $IN[I_SM2_Pr_iO]) OR $IN[I_SM2_Sammel] OR SM2_LBitFeh)
;
;Lebensbit-Ueberwachung  
L_Bit_SM(2)
;
END
;ENDFOLD
;
;-----------------------------------------------------------
;FOLD Lebensbit SM
DEF L_Bit_SM(SMNr :IN)
;Setzen / Rueksetzen Lebensbit Roboter
INT SMNr
BOOL LBitSM, LBitFault
INT RobTimer
BOOL ErrLBit, bRet
ErrLBit = FALSE
LBitFault=FALSE
;Setzen - Rucksetzen  des Lebensbit an Zangensteuerung
$OUT[LBitToSM[SMNr]] = NOT $IN[LBitFromSM[SMNr]]
RobTimer = $ROB_TIMER	
IF $IN[LBitFromSM[SMNr]] <> LBitState[SMNr] THEN
  LBitTimeCnt[SMNr] = RobTimer
ENDIF
IF (RobTimer - LBitTimeCnt[SMNr]) > 5000 THEN
  ErrLBit = TRUE
  ErrSMNr = SMNr
  SM_LBitFeh[SMNr]=TRUE
ENDIF
LBitState[SMNr] = $IN[LBitFromSM[SMNr]]
IF ErrLBit THEN
  StanzMutter_Msg(1,#StateMsg, ErrSMNr)
ELSE
  IF n_SMS_Handle[1]>-1 THEN
    bRet=Clear_KrlMsg(n_SMS_Handle[1])
    n_SMS_Handle[1]=-1
    ErrSMNr = -1
  ENDIF
  SM_LBitFeh[SMNr]=FALSE
ENDIF
END
;ENDFOLD
;
;-----------------------------------------------------------
;FOLD SM_Meldungen
DEF StanzMutter_Msg(msg_nr :IN, MsgTyp :IN, SMNr :IN)
INT msg_nr, SMNr, Answer
DECL SMS_MsgType MsgTyp
DECL KrlMsg_T USER_MSG
DECL KrlMsgPar_T Par[3]
DECL KrlMsgOpt_T Opt
;
USER_MSG = { Modul[] "SM_S_Msg", Nr -1, Msg_txt[] " "}
Opt = { VL_Stop FALSE, Clear_P_Reset TRUE, Log_To_DB TRUE }
Par[1] = { Par_type #Value, Par_txt[] " " }
;
IF Varstate("SMNr")==#initialized then
  SWITCH SMNr
    CASE 1
      Par[1] = { Par_type #Value, Par_int 1 }
    CASE 2
      Par[1] = { Par_type #Value, Par_int 2 }
    CASE 3
      Par[1] = { Par_type #Value, Par_int 3 }
    CASE 4
      Par[1] = { Par_type #Value, Par_int 4 }
    CASE 5
      Par[1] = { Par_type #Value, Par_int 5 }
    CASE 6
      Par[1] = { Par_type #Value, Par_int 6 }
    DEFAULT
      Par[1] = { Par_type #Value, Par_txt[] " " }
  ENDSWITCH
ELSE
  Par[1] = { Par_type #Value, Par_txt[] " " }
ENDIF
;
IF ((n_SMS_Handle[msg_nr]<0) OR (MsgTyp==#NotifyMsg) OR (MsgTyp==#QuitMsg)) THEN
  USER_MSG.Nr = msg_nr
  SWITCH msg_nr
    CASE 1
	   USER_MSG.MSG_TXT[]="SM%1 :keine Antwort auf Lebensbit"
    CASE 2
	   USER_MSG.MSG_TXT[]=" "
    CASE 3
	   USER_MSG.MSG_TXT[]=" "
    CASE 4
	   USER_MSG.MSG_TXT[]=" "
    DEFAULT
	   USER_MSG.MSG_TXT[]="unbekannte Meldung"
  ENDSWITCH
  SWITCH MsgTyp
    CASE #StateMsg
      n_SMS_Handle[msg_nr] = Set_KrlMsg (#State, USER_MSG, Par[], Opt) ;Ausgabe Statusmeldung
    CASE #QuitMsg
      n_SMS_Handle[msg_nr] = Set_KrlMsg (#Quit, USER_MSG, Par[], Opt) ;Ausgabe Quittierungsmeldung
    CASE #NotifyMsg
      n_SMS_Handle[msg_nr] = Set_KrlMsg (#Notify, USER_MSG, Par[], Opt) ;Ausgabe Hinweismeldung
    DEFAULT
      n_SMS_Handle[msg_nr] = Set_KrlMsg (#Quit, USER_MSG, Par[], Opt) ;Ausgabe Quittierungsmeldung
  ENDSWITCH
ENDIF
END
;
;ENDFOLD (SM Meldungen)
